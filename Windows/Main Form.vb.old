#Region "--== Imported Namespaces ==--"
Imports System.Management
Imports Microsoft.Win32
Imports System.Text.RegularExpressions
Imports System.Net.NetworkInformation
Imports System.Text
Imports System.Runtime.InteropServices
Imports System.IO.Compression
Imports Microsoft.Win32.TaskScheduler
#End Region

Public Class Form1
#Region "--== Program-Wide Variables ==--"
    Private boolDoneLoading As Boolean = False, boolDoneLoadingRestorePoints As Boolean = True
    Private deleteThread, updateRestorePointListThread As System.Threading.Thread
    Private newestSystemRestoreID As Integer
    Private m_SortingColumn As ColumnHeader
    Private maxDays As Short
    Public defaultCustomRestorePointName As String

    Private restorePointDateData As New Dictionary(Of String, String)
#End Region

#Region "--== Form Load Event Sub-Routines ==--"
    Sub checkForWindowsXPAndDisableAppropriateStuff()
        ' Checks to see if the system is Windows XP.
        If GlobalVariables.boolWinXP = True Then
            ' OK, we are running on Windows XP.  Now let's disable the parts of the program that don't work on Windows XP.
            btnDeleteRestorePoint.Enabled = False
            btnDeleteRestorePoint.Text &= " (Disabled)"
            ToolTip.SetToolTip(btnDeleteRestorePoint, "Disabled on Windows XP")

            toolStripManageSystemRestoreStorageSize.Visible = False
            toolStripDeleteOldRestorePoints.Visible = False
            toolStripClear.Visible = False
            toolStripLogRestorePointDeletions.Visible = False
            toolStripConfirmDeletions.Visible = False
            toolStripDeleteOldRestorePoints.Visible = False
            toolStripDeleteAllRestorePoints.Visible = False
            toolStripDeleteRestorePoints.Visible = False
            toolStripScheduleRestorePoints.Visible = False
            stripDelete.Visible = False
            KeepXAmountOfRestorePointsToolStripMenuItem.Visible = False
            AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Visible = False

            'TableLayoutPanel2.ColumnCount = 1
            btnDeleteRestorePoint.Visible = False
            btnRestoreToRestorePointSafeMode.Visible = False
            BypassNoUACLauncherToolStripMenuItem.Visible = False

            If Functions.areWeInSafeMode() = False Then
                If Short.Parse(Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, False).GetValue("Deleted Scheduled Tasks for Windows XP", 0)) = 0 Then
                    Try
                        Dim taskService As New TaskService

                        For Each task As Task In taskService.RootFolder.Tasks
                            If task.Name = "System Restore Checkpoint by System Restore Point Creator" Then
                                taskService.RootFolder.DeleteTask(task.Name)
                            ElseIf task.Name = "Delete Old Restore Points" Then
                                taskService.RootFolder.DeleteTask(task.Name)
                            End If
                        Next

                        taskService.Dispose()
                        taskService = Nothing
                    Catch ex As Exception
                        ' We don't care if it crashes, keep executing the program as is.
                    End Try

                    Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Deleted Scheduled Tasks for Windows XP", 1, RegistryValueKind.DWord)
                End If
            End If
        End If
    End Sub

    Sub checkForMyComputerRightClickOption()
        Try
            If Functions.isThisWindows10() = True Then
                ' Apparently Microsoft doesn't want anyone adding anything to the My Computer context menu since they have completely made it impossible
                ' to do so via Registry Access Permission settings. So, we disable this part of the program and hide it from users.
                toolStripMyComputer.Visible = False
                toolStripMyComputer.Enabled = False
                Exit Sub
            End If

            Dim valueInRegistryObject As Object, valueInRegistry As String
            Dim iconPath As String
            Dim registryKey As RegistryKey
            Dim matches As RegularExpressions.Match

            ' This checks to see if we need to rename the Registry key for the "My Computer" right-click context menu.
            ' First we check to see if "Create Custom Named System Restore" exists, if it does then we go onto checking if
            ' "Create Custom Named System Restore Point" doesn't exist.  If both "Create Custom Named System Restore" exists
            ' AND "Create Custom Named System Restore Point" doesn't exist, then we know that we have to rename the
            ' "Create Custom Named System Restore" to "Create Custom Named System Restore Point".
            Try
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore", False) Is Nothing) = False And (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point", False) Is Nothing) = True Then
                    'debug.writeline("renaming registry key")
                    Functions.renameRegistrySubKey(Microsoft.Win32.Registry.ClassesRoot, "CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore", "CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point")
                End If
            Catch ex As Exception
            End Try

            If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint", False) Is Nothing) = False Then
                toolStripMyComputer.Checked = True

                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint\command", False) Is Nothing) = False Then
                    valueInRegistryObject = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint\command", False).GetValue(vbNullString, Nothing)

                    If (valueInRegistryObject Is Nothing) = False Then
                        ' OK, it does exist so let's go on with the process of checking for the validity of the entries.
                        valueInRegistry = valueInRegistryObject.ToString.ToLower

                        ' We check if the current Registry path is different than the current process's EXE path.
                        If valueInRegistry.Contains(Application.ExecutablePath.ToLower) = False Then
                            ' OK, it doesn't match the current process's EXE path.

                            ' We parse out the EXE's path out of the combined path with the argument.
                            matches = Regex.Match(valueInRegistry, "((?:""|'){0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)(?:""|'){0,1} {0,1})(.*)", RegexOptions.IgnoreCase)
                            ' matches = Regex.Match(valueInRegistry, "(""{0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)""{0,1} )(.*)", RegexOptions.IgnoreCase)

                            If (matches Is Nothing) = False Then
                                ' Now we make sure that the file exists.
                                If System.IO.File.Exists(matches.Groups(1).Value.Replace(Chr(34), "").Trim) = False Then
                                    '  OK, it doesn't.  The entries in the Registry are invalid, now let's fix them.
                                    registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint\Command", True)

                                    If (registryKey Is Nothing) = False Then ' This should prevent Null Reference Exceptions.
                                        registryKey.SetValue(vbNullString, String.Format("{0}{1}{0} -createrestorepoint", Chr(34), Application.ExecutablePath))
                                        registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                                        registryKey.Close()
                                        registryKey.Dispose()
                                    End If
                                Else
                                    ''debug.writeline("""My Computer"" right-click context menu item 1 EXE path is valid.")
                                End If
                            End If

                            matches = Nothing
                        End If
                    End If
                End If

                matches = Nothing
                valueInRegistryObject = Nothing
                valueInRegistry = Nothing

                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point\command", False) Is Nothing) = False Then
                    valueInRegistryObject = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point\command", False).GetValue(vbNullString, Nothing)

                    If (valueInRegistryObject Is Nothing) = False Then
                        ' OK, it does exist so let's go on with the process of checking for the validity of the entries.
                        valueInRegistry = valueInRegistryObject.ToString.ToLower

                        ' We check if the current Registry path is different than the current process's EXE path.
                        If valueInRegistry.Contains(Application.ExecutablePath.ToLower) = False Then
                            ' OK, it doesn't match the current process's EXE path.

                            ' We parse out the EXE's path out of the combined path with the argument.
                            matches = Regex.Match(valueInRegistry, "((?:""|'){0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)(?:""|'){0,1} {0,1})(.*)", RegexOptions.IgnoreCase)
                            ' matches = Regex.Match(valueInRegistry, "(""{0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)""{0,1} )(.*)", RegexOptions.IgnoreCase)

                            If (matches Is Nothing) = False Then
                                ' Now we make sure that the file exists.
                                If System.IO.File.Exists(matches.Groups(1).Value.Replace(Chr(34), "").Trim) = False Then
                                    ' OK, it doesn't.  The entries in the Registry are invalid, now let's fix them.
                                    registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point\Command", True)

                                    If (registryKey Is Nothing) = False Then ' This should prevent Null Reference Exceptions.
                                        registryKey.SetValue(vbNullString, String.Format("{0}{1}{0} -createrestorepointcustomname", Chr(34), Application.ExecutablePath))
                                        registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                                        registryKey.Close()
                                        registryKey.Dispose()
                                    End If
                                Else
                                    ''debug.writeline("""My Computer"" right-click context menu item 2 EXE path is valid.")
                                End If
                            End If

                            matches = Nothing
                        End If
                    End If
                End If

                matches = Nothing
                valueInRegistryObject = Nothing
                valueInRegistry = Nothing

                ' This checks to see if the entry exists...
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator\command", False) Is Nothing) = False Then
                    ' OK, it does exist so let's go on with the process of checking for the validity of the entries.
                    valueInRegistryObject = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator\command", False).GetValue(vbNullString, Nothing)

                    If (valueInRegistryObject Is Nothing) = False Then
                        ' OK, it does exist so let's go on with the process of checking for the validity of the entries.
                        valueInRegistry = valueInRegistryObject.ToString.ToLower

                        ' We check if the current Registry path is different than the current process's EXE path.
                        If valueInRegistry.Contains(Application.ExecutablePath.ToLower) = False Then
                            ' OK, it doesn't match the current process's EXE path.

                            ' We parse out the EXE's path out of the combined path with the argument.
                            matches = Regex.Match(valueInRegistry, "((?:""|'){0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)(?:""|'){0,1} {0,1})(.*)", RegexOptions.IgnoreCase)
                            ' matches = Regex.Match(valueInRegistry, "(""{0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)""{0,1})", RegexOptions.IgnoreCase)

                            If (matches Is Nothing) = False Then
                                ' Now we make sure that the file exists.
                                If System.IO.File.Exists(matches.Groups(1).Value.Replace(Chr(34), "").Trim) = False Then
                                    ' OK, it doesn't.  The entries in the Registry are invalid, now let's fix them.
                                    registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator\Command", True)

                                    If (registryKey Is Nothing) = False Then ' This should prevent Null Reference Exceptions.
                                        registryKey.SetValue(vbNullString, String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                                        registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                                        registryKey.Close()
                                        registryKey.Dispose()
                                    End If
                                Else
                                    ''debug.writeline("""My Computer"" right-click context menu item 3 EXE path is valid.")
                                End If
                            End If

                            matches = Nothing
                        End If
                    End If
                Else
                    ' Nope, this user must have been using an older version of this program, one that didn't have this option.  So let's create it.

                    ' ===================================================
                    ' == Makes the "Launch Restore Point Creator" Item ==
                    ' ===================================================

                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).CreateSubKey("Launch Restore Point Creator")
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", True).CreateSubKey("Command")

                    registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", True)
                    If GlobalVariables.boolWinXP = False Then
                        registryKey.SetValue("HasLUAShield", "", RegistryValueKind.String)
                    End If
                    registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                    registryKey.SetValue("SuppressionPolicy", 1073741884, RegistryValueKind.DWord)
                    registryKey.Close()
                    registryKey.Dispose()

                    registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator\Command", True)
                    registryKey.SetValue(vbNullString, String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                    registryKey.Close()
                    registryKey.Dispose()
                End If

                matches = Nothing
                valueInRegistryObject = Nothing

                iconPath = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint").GetValue("icon", "nothing")
                If iconPath.ToLower.Contains(Application.ExecutablePath.ToLower) = False Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint", True).SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                End If

                iconPath = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point").GetValue("icon", "nothing")
                If iconPath.ToLower.Contains(Application.ExecutablePath.ToLower) = False Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point", True).SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                End If

                iconPath = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator").GetValue("icon", "nothing")
                If iconPath.ToLower.Contains(Application.ExecutablePath.ToLower) = False Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", True).SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                End If
            End If
        Catch ex As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex.Message, ex.StackTrace, ex.GetType)
        End Try
    End Sub

    'Sub addTask(taskName As String, taskDescription As String, taskEXEPath As String, taskParameters As String, taskTriggers As TriggerCollection)
    '    If Functions.areWeInSafeMode() = True Then Exit Sub

    '    Try
    '        taskName = taskName.Trim
    '        taskDescription = taskDescription.Trim
    '        taskEXEPath = taskEXEPath.Trim
    '        taskParameters = taskParameters.Trim

    '        Dim triggerDescription As String

    '        If System.IO.File.Exists(taskEXEPath) = False Then
    '            MsgBox("Executable path not found.", MsgBoxStyle.Critical, Me.Text)
    '            Exit Sub
    '        End If

    '        Dim taskService As TaskService = New TaskService()
    '        Dim newTask As TaskDefinition = taskService.NewTask

    '        newTask.RegistrationInfo.Description = taskDescription

    '        For Each taskTrigger As Trigger In taskTriggers
    '            If taskTrigger.TriggerType = TaskTriggerType.Daily Then
    '                Dim trigger As Trigger = newTask.Triggers.Add(New Microsoft.Win32.TaskScheduler.DailyTrigger(1))
    '                trigger.StartBoundary = taskTrigger.StartBoundary
    '            ElseIf taskTrigger.TriggerType = TaskTriggerType.Weekly Then
    '                Dim daysOfWeekSetting As New DaysOfTheWeek

    '                triggerDescription = taskTrigger.ToString(New System.Globalization.CultureInfo("en-US"))

    '                With triggerDescription
    '                    If .Contains("Sunday") Then daysOfWeekSetting += DaysOfTheWeek.Sunday
    '                    If .Contains("Monday") Then daysOfWeekSetting += DaysOfTheWeek.Monday
    '                    If .Contains("Tuesday") Then daysOfWeekSetting += DaysOfTheWeek.Tuesday
    '                    If .Contains("Wednesday") Then daysOfWeekSetting += DaysOfTheWeek.Wednesday
    '                    If .Contains("Thursday") Then daysOfWeekSetting += DaysOfTheWeek.Thursday
    '                    If .Contains("Friday") Then daysOfWeekSetting += DaysOfTheWeek.Friday
    '                    If .Contains("Saturday") Then daysOfWeekSetting += DaysOfTheWeek.Saturday
    '                End With

    '                newTask.Triggers.Add(New WeeklyTrigger() With {.StartBoundary = taskTrigger.StartBoundary, .DaysOfWeek = daysOfWeekSetting})
    '            End If
    '        Next

    '        Dim exeFileInfo As New System.IO.FileInfo(taskEXEPath)

    '        newTask.Actions.Add(New ExecAction(Chr(34) & taskEXEPath & Chr(34), taskParameters, exeFileInfo.DirectoryName))

    '        'If parameters = Nothing Then
    '        '    newTask.Actions.Add(New ExecAction(Chr(34) & txtEXEPath.Text & Chr(34), Nothing, exeFileInfo.DirectoryName))
    '        'Else
    '        '    newTask.Actions.Add(New ExecAction(Chr(34) & txtEXEPath.Text & Chr(34), parameters, exeFileInfo.DirectoryName))
    '        'End If

    '        newTask.Principal.UserId = "NT AUTHORITY\System"

    '        If GlobalVariables.boolWinXP = False Then
    '            newTask.Principal.RunLevel = TaskRunLevel.Highest
    '            newTask.Settings.Compatibility = TaskCompatibility.V1
    '            newTask.Settings.AllowDemandStart = True
    '            newTask.Settings.AllowHardTerminate = False
    '            'newTask.Settings.UseUnifiedSchedulingEngine = False
    '            newTask.Settings.StartWhenAvailable = True
    '        End If

    '        newTask.Settings.DisallowStartIfOnBatteries = False
    '        newTask.Settings.RunOnlyIfIdle = False
    '        newTask.Settings.StopIfGoingOnBatteries = False
    '        newTask.Settings.ExecutionTimeLimit = Nothing

    '        taskService.RootFolder.RegisterTaskDefinition(taskName, newTask)

    '        newTask.Dispose()
    '        taskService.Dispose()
    '        newTask = Nothing
    '        taskService = Nothing
    '    Catch ex As Exception
    '        Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
    '        manuallyLoadCrashWindow(ex.Message, ex.StackTrace, ex.GetType)
    '    End Try
    'End Sub

    Sub checkScheduledTaskEXEPathsSubRoutine(taskService As TaskService, task As Task, commandLineArgument As String)
        If Functions.areWeInSafeMode() = True Then Exit Sub

        Try
            Dim actions As ActionCollection
            Dim matches As RegularExpressions.Match
            Dim exePathInTask As String
            'Dim taskDescription, taskName As String
            'Dim taskTriggers As TriggerCollection

            actions = task.Definition.Actions

            For Each action As Microsoft.Win32.TaskScheduler.Action In actions
                If action.ActionType = TaskActionType.Execute Then
                    matches = Regex.Match(action.ToString, "((?:""|'){0,1}[A-Za-z]:\\.*\.(?:bat|bin|cmd|com|cpl|exe|gadget|inf1|ins|inx|isu|job|jse|lnk|msc|msi|msp|mst|paf|pif|ps1|reg|rgs|sct|shb|shs|u3p|vb|vbe|vbs|vbscript|ws|wsf)(?:""|'){0,1} {0,1})(.*)", RegexOptions.IgnoreCase)
                    exePathInTask = matches.Groups(1).Value.Replace(Chr(34), "").Trim

                    ' We check if the current Registry path is different than the current process's EXE path.
                    If (exePathInTask.ToLower = Application.ExecutablePath.ToLower) = False Then
                        task.Definition.Actions.RemoveAt(action.Id)

                        ' OK, it doesn't match the current process's EXE path.
                        'taskDescription = task.Definition.RegistrationInfo.Description
                        'taskName = task.Name
                        'taskTriggers = task.Definition.Triggers

                        actions.Add(New TaskScheduler.ExecAction(Application.ExecutablePath, commandLineArgument))
                        task.RegisterChanges()

                        'taskService.RootFolder.DeleteTask(taskName)

                        'Dim executablePathInfo As New System.IO.FileInfo(Application.ExecutablePath)
                        'addTask(taskName, taskDescription, executablePathInfo.FullName, commandLineArgument, taskTriggers)
                    End If
                End If
            Next
        Catch ex As System.IO.FileNotFoundException
            Functions.writeCrashToEventLog(ex)
        Catch ex As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex.Message, ex.StackTrace, ex.GetType)
        End Try
    End Sub

    Sub checkScheduledTaskEXEPaths()
        If Functions.areWeInSafeMode() = True Then Exit Sub
        If GlobalVariables.boolWinXP = True Then Exit Sub
        If Debugger.IsAttached = True Then Exit Sub

        Try
            Dim taskService As New TaskService

            For Each task As Task In taskService.RootFolder.Tasks
                If task.Name = "System Restore Checkpoint by System Restore Point Creator" Then
                    checkScheduledTaskEXEPathsSubRoutine(taskService, task, "-createscheduledrestorepoint")
                ElseIf task.Name = "Delete Old Restore Points" Then
                    checkScheduledTaskEXEPathsSubRoutine(taskService, task, "-deleteoldrestorepoints")
                ElseIf task.Name = "Create a Restore Point at User Logon" Then
                    checkScheduledTaskEXEPathsSubRoutine(taskService, task, "-createscheduledrestorepoint")
                End If
            Next

            taskService.Dispose()
            taskService = Nothing
        Catch ex As System.IO.FileNotFoundException
            Functions.writeCrashToEventLog(ex)
        Catch ex As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex.Message, ex.StackTrace, ex.GetType)
        End Try
    End Sub

    Sub loadPreferences()
        Try
            My.Settings.firstRun = False
            My.Settings.Save()

            If Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey) Is Nothing Then
                defaultCustomRestorePointName = ""
            Else
                defaultCustomRestorePointName = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("Default Custom Restore Point Name", "").ToString.Trim
            End If

            If defaultCustomRestorePointName.Trim <> "" And Functions.areWeInSafeMode() = False Then btnCreateRestorePointNameWithDefaultName.Visible = True

            If My.Settings.updateChannel = GlobalVariables.updateChannelStable Then
                toolStripStableChannel.Checked = True
            ElseIf My.Settings.updateChannel = GlobalVariables.updateChannelBeta Then
                toolStripBetaChannel.Checked = True
            End If

            If GlobalVariables.boolDebugBuild = True Then
                SwitchToDebugBuildToolStripMenuItem.Visible = False
            End If

            If My.Settings.CheckForUpdates = True Then
                toolStripAutomaticallyCheckForUpdates.Checked = True

                Dim formLoadCheckForUpdatesRoutineThread As New Threading.Thread(Sub() formLoadCheckForUpdatesRoutine())
                formLoadCheckForUpdatesRoutineThread.Name = "Form Load Check For Updates Routine Thread"
                formLoadCheckForUpdatesRoutineThread.Start()
            End If

            toolStripCloseAfterRestorePointIsCreated.Checked = My.Settings.closeAfterCreatingRestorePoint
            AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked = My.Settings.allowDeleteOfAllRestorePoints

            If My.Settings.notificationType = GlobalVariables.notificationTypeBalloon Then
                BalloonToolStripMenuItem.Checked = True
                MessageBoxToolStripMenuItem.Checked = False
            Else
                BalloonToolStripMenuItem.Checked = False
                MessageBoxToolStripMenuItem.Checked = True
            End If

            Me.Size = My.Settings.windowSize

            ColumnHeader1.Width = My.Settings.column1Size
            ColumnHeader2.Width = My.Settings.column2Size
            ColumnHeader3.Width = My.Settings.column3Size
            ColumnHeader4.Width = My.Settings.column4Size

            deleteProgressBar.ProgressBarColor = My.Settings.barColor

            ShowMessageBoxAfterSuccessfulCreationOfRestorePointToolStripMenuItem.Checked = My.Settings.ShowMessageBoxAfterSuccessfulCreationOfRestorePoint
            ShowMessageBoxAfterSuccessfulDeletionOfRestorePointsToolStripMenuItem.Checked = My.Settings.ShowMessageBoxAfterSuccessfulDeletionOfRestorePoints
            CheckSystemDrivesForFullShadowStorageToolStripMenuItem.Checked = My.Settings.checkSystemDrivesForFullShadowStorage
            EnableSystemEventLoggingToolStripMenuItem.Checked = GlobalVariables.boolLogToSystemLog
            LogProgramLoadsAndExitsToEventLogToolStripMenuItem.Checked = GlobalVariables.boolLogLoadsAndExitsToEventLog
            CheckWindowsActivePowerPlan.Checked = GlobalVariables.CheckWindowsActivePowerPlan
            TellMeIfRestorePointCreatorModifiedMyPowerPlan.Checked = My.Settings.TellMeIfRestorePointCreatorModifiedMyPowerPlan

            If My.Settings.checkForUpdatesEveryInDays = 7 Then
                toolStripCheckEveryWeek.Checked = True
            ElseIf My.Settings.checkForUpdatesEveryInDays = 14 Then
                toolStripCheckEveryTwoWeeks.Checked = True
            Else
                toolStripCheckCustom.Checked = True

                If My.Settings.checkForUpdatesEveryInDays = 1 Then
                    toolStripCheckCustom.Text = "Custom Time Interval (Check for updates every day)"
                Else
                    toolStripCheckCustom.Text = "Custom Time Interval (Check for updates every " & My.Settings.checkForUpdatesEveryInDays & " days)"
                End If
            End If

            If GlobalVariables.boolWinXP = False Then
                If GlobalVariables.KeepXAmountOfRestorePoints = True Then
                    KeepXAmountOfRestorePointsToolStripMenuItem.Checked = True
                    KeepXAmountOfRestorePointsToolStripMenuItem.Text &= " (" & GlobalVariables.KeepXAmountofRestorePointsValue & ")"
                End If

                Dim regKey As RegistryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True)
                If (regKey Is Nothing) = False Then
                    ' Converts some settings over to Registry-based Settings.
                    If regKey.GetValue("MaxDays", Nothing) = Nothing Then
                        regKey.SetValue("MaxDays", My.Settings.maxDays)
                    End If

                    If regKey.GetValue("Log Restore Point Deletions", Nothing) = Nothing Then
                        regKey.SetValue("Log Restore Point Deletions", My.Settings.boolLogDeletedRestorePoints.ToString)
                    End If

                    If regKey.GetValue("Delete Old Restore Points", Nothing) = Nothing Then
                        regKey.SetValue("Delete Old Restore Points", My.Settings.deleteOldRestorePoints2)
                    End If
                    ' Converts some settings over to Registry-based Settings.

                    regKey.Close()
                    regKey.Dispose()
                End If

                If My.Settings.maxDaysManualDelete = -1 = False Then
                    If My.Settings.maxDaysManualDelete = 1 Then
                        toolStripDeleteOldRestorePoints.Text = "Delete Restore Points older than 1 Day"
                    Else
                        toolStripDeleteOldRestorePoints.Text = "Delete Restore Points older than " & My.Settings.maxDaysManualDelete & " Days"
                    End If
                End If

                toolStripConfirmDeletions.Checked = My.Settings.confirmRestorePointDeletions

                Dim registryObject As RegistryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, False)
                Dim boolNoTask, boolLogRestorePointDeletions As Boolean

                If (registryObject Is Nothing) = False Then
                    If Boolean.TryParse(Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("No Task", "False"), boolNoTask) Then
                        BypassNoUACLauncherToolStripMenuItem.Checked = boolNoTask
                    End If

                    If Boolean.TryParse(Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("Log Restore Point Deletions", "False"), boolLogRestorePointDeletions) Then
                        toolStripLogRestorePointDeletions.Checked = boolLogRestorePointDeletions
                    End If

                    registryObject.Close()
                    registryObject.Dispose()
                Else
                    BypassNoUACLauncherToolStripMenuItem.Checked = False
                    boolNoTask = False

                    toolStripLogRestorePointDeletions.Checked = False
                    boolLogRestorePointDeletions = False
                End If

                'Dim boolNoTask As Boolean
                'If (Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey) Is Nothing) = False Then
                '    If Boolean.TryParse(Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("No Task", "False"), boolNoTask) Then
                '        BypassNoUACLauncherToolStripMenuItem.Checked = boolNoTask
                '    End If
                'Else
                '    BypassNoUACLauncherToolStripMenuItem.Checked = False
                '    boolNoTask = False
                'End If

                'Dim boolLogRestorePointDeletions As Boolean
                'If (Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey) Is Nothing) = False Then
                '    If Boolean.TryParse(Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("Log Restore Point Deletions", "False"), boolLogRestorePointDeletions) Then
                '        toolStripLogRestorePointDeletions.Checked = boolLogRestorePointDeletions
                '    End If
                'Else
                '    toolStripLogRestorePointDeletions.Checked = False
                '    boolLogRestorePointDeletions = False
                'End If

                'Dim boolValueFromRegistryAsString As String = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("Log Restore Point Deletions", "False")
                'boolValueFromRegistryAsString = boolValueFromRegistryAsString.Trim

                'If boolValueFromRegistryAsString.ToLower = "true" Or boolValueFromRegistryAsString.ToLower = "false" Then
                '    toolStripLogRestorePointDeletions.Checked = Boolean.Parse(boolValueFromRegistryAsString)
                'Else
                '    toolStripLogRestorePointDeletions.Checked = False
                'End If
            End If
        Catch ex As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex.Message, ex.StackTrace, ex.GetType)
        End Try
    End Sub

    Sub addSpecialRegistryKeysToWindows8ToFixWindows8SystemRestorePoint()
        Debug.Write("We are running on Windows 8 or 8.1")
        ' Yep, we are.  Let the changes commence.

        If Environment.Is64BitOperatingSystem = False Then
            'debug.writeline(" 32-bit")

            ' Checks to see if the Registry Subkey exists, that way we don't have a Null Reference Exception.
            If (Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore") Is Nothing) = False Then
                ' OK, the Registry Subkey exists, now to create the Registry value that we need to create.
                'debug.writeline("Setting special registry key for 32-bit")
                Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", True).SetValue("SystemRestorePointCreationFrequency", 0, RegistryValueKind.DWord)
            Else
                ' No, the Registry Subkey doesn't exist, so we have to create the Registry Subkey first then set the Registry value.
                Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion", True).CreateSubKey("SystemRestore")
                Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", True).SetValue("SystemRestorePointCreationFrequency", 0, RegistryValueKind.DWord)
            End If
        Else
            'debug.writeline(" 64-bit")

            ' Checks to see if the Registry Subkey exists, that way we don't have a Null Reference Exception.
            If (RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64).OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore") Is Nothing) = False Then
                ' OK, it exists.  Now let's set the setting.
                'debug.writeline("Setting special registry key for 64-bit")
                RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64).OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", True).SetValue("SystemRestorePointCreationFrequency", 0, RegistryValueKind.DWord)
            Else
                ' No, the Registry Subkey doesn't exist, so we have to create the Registry Subkey first then set the Registry value.
                'debug.writeline("Creating Registry subkey and setting special registry key for 64-bit")

                RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64).OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion", True).CreateSubKey("SystemRestore")
                RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64).OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", True).SetValue("SystemRestorePointCreationFrequency", 0, RegistryValueKind.DWord)
            End If

            ' This is commented out because it appears that this second registry key value isn't needed.  But, I'm not removing it since it may be needed later if time proves it's needed after all.
            '' Checks to see if the Registry Subkey exists, that way we don't have a Null Reference Exception.
            'If (Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore") Is Nothing) = False Then
            '    ' OK, the Registry Subkey exists, now to create the Registry value that we need to create.
            '    'debug.writeline("Setting special registry key #2 for 64-bit")
            '    Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", True).SetValue("SystemRestorePointCreationFrequency", 0, RegistryValueKind.DWord)
            'Else
            '    ' No, the Registry Subkey doesn't exist, so we have to create the Registry Subkey first then set the Registry value.
            '    'debug.writeline("Creating Registry subkey and setting special registry key #2 for 64-bit")

            '    Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion", True).CreateSubKey("SystemRestore")
            '    Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", True).SetValue("SystemRestorePointCreationFrequency", 0, RegistryValueKind.DWord)
            'End If
        End If

        ' ===============================================================================================================================
        ' == This code was added on February 4th, 2014 as a fix to the loss of disk drives under My Computer on Window 8/8.1 machines. ==
        ' == This counteracts the Registry settings that were added to the Registry by the commented out code that's below.            ==
        ' ===============================================================================================================================
        ' First checks to see if the Registry key exists.
        If (Registry.LocalMachine.OpenSubKey("SYSTEM\MountedDevices\Offline", False) Is Nothing) = False Then
            ' Yep, it does exist.  So now we open the Registry one step below the sub-key we need to delete.
            Registry.LocalMachine.OpenSubKey("SYSTEM\MountedDevices", True).DeleteSubKeyTree("Offline") ' Does a recursive delete of the Registry sub-key.

            ' Tells the user that it's highly recommended to reboot their machine.
            Dim msgBoxRebootQuestionResult As MsgBoxResult = MsgBox("Due to a fix included in this build for Windows 8/8.1 machines, a reboot of this computer is recommended." & vbCrLf & vbCrLf & "Would you like to reboot your computer now?", MsgBoxStyle.Information + MsgBoxStyle.YesNo, Me.Text)

            If msgBoxRebootQuestionResult = MsgBoxResult.Yes Then ' Checks to see if the user answered with a "Yes".
                'Dim systemRestorePointClassInstance As New SystemRestorePointCreator.Classes.SystemRestore ' Creates a new instance of the SystemRestore Class.
                Functions.rebootSystem() ' And finally sends the reboot command.
            End If
        End If
        ' ===============================================================================================================================
        ' == This code was added on February 4th, 2014 as a fix to the loss of disk drives under My Computer on Window 8/8.1 machines. ==
        ' == This counteracts the Registry settings that were added to the Registry by the commented out code that's below.            ==
        ' ===============================================================================================================================

        ' ====================================================================================
        ' == This code was commented out on February 4th, 2014 as a fix to the loss of disk ==
        ' == drives under My Computer on Window 8/8.1 machines.  Bad code, very bad code!   ==
        ' ====================================================================================
        '' This code is here to fix Windows 8 being stupid about deleting old restore points.  Fuck you Microsoft!  Added
        '' on December 10th, 2013.  https://secure.dslreports.com/forum/r28868161-Updated-Free-Restore-Point-Creator-2.0
        'If Registry.LocalMachine.OpenSubKey("SYSTEM\MountedDevices\Offline") Is Nothing Then
        '    Registry.LocalMachine.OpenSubKey("SYSTEM\MountedDevices", True).CreateSubKey("Offline")
        '    'debug.writeline("Creating Offline Key")
        'End If

        'Dim driveLetter As String
        'Dim offLine As RegistryKey = Registry.LocalMachine.OpenSubKey("SYSTEM\MountedDevices\Offline", True)

        '' This is to hopefully stop a Null Reference Exception crash.
        'If (offLine Is Nothing) = False Then
        '    For Each currentDrive As IO.DriveInfo In My.Computer.FileSystem.Drives
        '        If currentDrive.DriveType = IO.DriveType.Fixed Then
        '            driveLetter = currentDrive.RootDirectory.ToString.Replace(":\", "")
        '            'debug.writeline("driveLetter = " & driveLetter)

        '            If offLine.GetValue("\DosDevices\" & driveLetter & ":", 2) = 2 Then
        '                offLine.SetValue("\DosDevices\" & driveLetter & ":", 1, RegistryValueKind.DWord)
        '            End If

        '            If offLine.GetValue("\DosDevices\" & driveLetter, 2) = 2 Then
        '                offLine.SetValue("\DosDevices\" & driveLetter, 1, RegistryValueKind.DWord)
        '            End If
        '        End If
        '    Next
        'End If

        'offLine.Close()
        'offLine.Dispose()
        'driveLetter = Nothing
        ' ====================================================================================
        ' == This code was commented out on February 4th, 2014 as a fix to the loss of disk ==
        ' == drives under My Computer on Window 8/8.1 machines.  Bad code, very bad code!   ==
        ' ====================================================================================
    End Sub
#End Region

#Region "--== Functions and Sub-Routines ==--"
    'Private Shared Function enumDescription(ByVal EnumConstant As [Enum]) As String
    '    Dim fi As Reflection.FieldInfo = EnumConstant.GetType().GetField(EnumConstant.ToString())
    '    Dim aattr() As DescriptionAttribute = DirectCast(fi.GetCustomAttributes(GetType(DescriptionAttribute), False), DescriptionAttribute())
    '    If aattr.Length > 0 Then
    '        Return aattr(0).Description
    '    Else
    '        Return EnumConstant.ToString()
    '    End If
    'End Function

    'Function fileSizeToHumanReadableFormat(ByVal size As Long) As String
    '    Dim result As String

    '    If size <= (2 ^ 10) Then
    '        result = size & " Bytes"
    '    ElseIf size > (2 ^ 10) And size <= (2 ^ 20) Then
    '        result = System.Math.Round(size / (2 ^ 10), 2) & " KB"
    '    ElseIf size > (2 ^ 20) And size <= (2 ^ 30) Then
    '        result = System.Math.Round(size / (2 ^ 20), 2) & " MB"
    '    ElseIf size > (2 ^ 30) And size <= (2 ^ 40) Then
    '        result = System.Math.Round(size / (2 ^ 30), 2) & " GB"
    '    ElseIf size > (2 ^ 40) And size <= (2 ^ 50) Then
    '        result = System.Math.Round(size / (2 ^ 40), 2) & " TB"
    '    ElseIf size > (2 ^ 50) And size <= (2 ^ 60) Then
    '        result = System.Math.Round(size / (2 ^ 50), 2) & " PB"
    '    Else
    '        result = Nothing
    '    End If

    '    Return result
    'End Function

    Public Sub doDeleteOldSystemRestorePoint(maxAgeInput As Short)
        maxDays = maxAgeInput

        toolStripDeleteOldRestorePoints.Enabled = False
        btnDeleteRestorePoint.Enabled = False
        stripDelete.Enabled = False

        Functions.openPleaseWaitWindow("Deleting Restore Points... Please Wait.")

        deleteThread = New Threading.Thread(AddressOf deleteOldRestorePoints)
        deleteThread.Name = "Delete Old Restore Points Thread"
        deleteThread.Priority = Threading.ThreadPriority.Lowest
        deleteThread.Start()
    End Sub

    Private Sub disableFormElements()
        txtRestorePointDescription.Enabled = False
        toolStripCloseAfterRestorePointIsCreated.Enabled = False
        toolStripAbout.Enabled = False
        toolStripCheckForUpdates.Enabled = False
        toolStripAutomaticallyCheckForUpdates.Enabled = False
        toolStripConfirmDeletions.Enabled = False
        systemRestorePointsList.Enabled = False
        btnRefreshRestorePoints.Enabled = False
        btnRestoreToRestorePoint.Enabled = False
        stripRestoreSafeMode.Enabled = False
        btnRestoreToRestorePointSafeMode.Enabled = False
        btnCreateSystemCheckpoint.Enabled = False
        stripRefresh.Enabled = False
        restorePointListContextMenu.Enabled = False
        toolStripManageSystemRestoreStorageSize.Enabled = False
        toolStripLogRestorePointDeletions.Enabled = False
    End Sub

    Private Sub enableFormElements()
        txtRestorePointDescription.Enabled = True
        'btnCreate.Enabled = True
        toolStripCloseAfterRestorePointIsCreated.Enabled = True
        toolStripAbout.Enabled = True
        toolStripCheckForUpdates.Enabled = True
        toolStripAutomaticallyCheckForUpdates.Enabled = True
        toolStripConfirmDeletions.Enabled = True
        systemRestorePointsList.Enabled = True

        If GlobalVariables.boolWinXP = False Then
            btnDeleteRestorePoint.Enabled = True
            toolStripManageSystemRestoreStorageSize.Enabled = True
            toolStripLogRestorePointDeletions.Enabled = True
        End If

        btnRefreshRestorePoints.Enabled = True
        'btnRestoreToRestorePoint.Enabled = True
        If Functions.areWeInSafeMode() = False Then btnCreateSystemCheckpoint.Enabled = True

        'stripDelete.Enabled = True
        stripRefresh.Enabled = True
        restorePointListContextMenu.Enabled = True
    End Sub

    Sub giveFeedbackAfterCreatingRestorePoint(result As Integer)
        Dim messageText As String, messageType As MsgBoxStyle, toolTipType As ToolTipIcon

        If result = Functions.ERROR_SUCCESS Then
            If Me.ShowMessageBoxAfterSuccessfulCreationOfRestorePointToolStripMenuItem.Checked = True Then
                If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
                    MsgBox("System Restore Point Created Successfully.", MsgBoxStyle.Information, Me.Text)
                Else
                    NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "System Restore Point Created Successfully.", ToolTipIcon.Info)
                End If
            End If

            Exit Sub
        ElseIf result = Functions.ERROR_DISK_FULL Then
            messageText = "System Restore Point Creation Failed.  Disk Full." & vbCrLf & vbCrLf & "Internal Windows Error Code: ERROR_DISK_FULL (112)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        ElseIf result = Functions.ERROR_INTERNAL_ERROR Then
            messageText = "System Restore Point Creation Failed.  Internal Error." & vbCrLf & vbCrLf & "Internal Windows Error Code: ERROR_INTERNAL_ERROR (1359)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        ElseIf result = Functions.ERROR_INVALID_DATA Then
            messageText = "System Restore Point Creation Failed.  Invalid Data." & vbCrLf & vbCrLf & "Internal Windows Error Code: ERROR_INVALID_DATA (13)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        ElseIf result = Functions.ERROR_TIMEOUT Then
            messageText = "System Restore Point Creation Failed.  Invalid Data." & vbCrLf & vbCrLf & "Internal Windows Error Code: ERROR_TIMEOUT (1460)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        ElseIf result = Functions.ERROR_SERVICE_DISABLED Then
            messageText = "System Restore Point Creation Failed.  Invalid Data." & vbCrLf & vbCrLf & "Internal Windows Error Code: ERROR_SERVICE_DISABLED (1058)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        ElseIf result = Functions.ERROR_BAD_ENVIRONMENT Then
            messageText = "System Restore Point Creation Failed.  Invalid Data." & vbCrLf & vbCrLf & "Internal Windows Error Code: ERROR_BAD_ENVIRONMENT (10)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        Else
            messageText = "System Restore Point Creation Failed." & vbCrLf & vbCrLf & "Internal Windows Error Code: UNKNOWN_ERROR (9999)"
            messageType = MsgBoxStyle.Critical
            toolTipType = ToolTipIcon.Error
        End If

        If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
            MsgBox(messageText, messageType, Me.Text)
        Else
            NotifyIcon1.ShowBalloonTip(5000, Me.Text, messageText, toolTipType)
        End If
    End Sub

    'Sub createSystemRestoreCheckpoint()
    '    disableFormElements()

    '    txtProgramStatus.Text = "Creating System Restore Point... Please Wait."

    '    Dim systemRestore As New SystemRestorePointCreator.Classes.SystemRestore
    '    Dim sequenceNumber As Long = newestSystemRestoreID + 1
    '    Dim result As Integer

    '    ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
    '    Dim systemRestorePoints As New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")
    '    'Dim oldNumberOfRestorePoints As Integer = systemRestorePoints.Get().Count
    '    Dim oldNewestRestorePointID As Integer = Functions.getNewestSystemRestorePointID

    '    If GlobalVariables.boolWinXP = True Then
    '        result = SystemRestorePointCreator.Classes.SystemRestore.StartRestore("System Checkpoint made by System Restore Point Creator", SystemRestorePointCreator.Classes.SystemRestore.RestoreType.Checkpoint, sequenceNumber)
    '    Else
    '        result = SystemRestorePointCreator.Classes.SystemRestore.StartRestore("System Checkpoint made by System Restore Point Creator", SystemRestorePointCreator.Classes.SystemRestore.RestoreType.WindowsType, sequenceNumber)
    '    End If

    '    SystemRestorePointCreator.Classes.SystemRestore.EndRestore(SystemRestorePointCreator.Classes.SystemRestore.newestRestorePointID)

    '    'While oldNumberOfRestorePoints = systemRestorePoints.Get().Count
    '    '    ' Does nothing, just loops and sleeps.
    '    '    Threading.Thread.Sleep(500)
    '    'End While
    '    While oldNewestRestorePointID = Functions.getNewestSystemRestorePointID
    '        ' Does nothing, just loops and sleeps.
    '        Threading.Thread.Sleep(500)
    '    End While

    '    enableFormElements()
    '    pleaseWaitInstance.allowClose = True
    '    pleaseWaitInstance.Close()
    '    pleaseWaitInstance.Dispose()
    '    systemRestorePoints.Dispose()

    '    giveFeedbackAfterCreatingRestorePoint(result)

    '    setDoingNothingTimer.Enabled = True

    '    updateSystemRestorePointsList()

    '    If toolStripCloseAfterRestorePointIsCreated.Checked Then Me.Close()
    'End Sub

    'Private Sub createSystemRestorePoint()
    '    If txtRestorePointDescription.Text.Trim = "" Then
    '        MsgBox("You must enter a description for your System Restore Point.", MsgBoxStyle.Critical, Me.Text)
    '        Exit Sub
    '    End If

    '    disableFormElements()

    '    txtProgramStatus.Text = "Creating System Restore Point... Please Wait."

    '    Dim systemRestore As New SystemRestorePointCreator.Classes.SystemRestore
    '    Dim sequenceNumber As Long = newestSystemRestoreID + 1
    '    Dim result As Integer

    '    ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
    '    Dim systemRestorePoints As New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")
    '    'Dim oldNumberOfRestorePoints As Integer = systemRestorePoints.Get().Count
    '    Dim oldNewestRestorePointID As Integer = Functions.getNewestSystemRestorePointID

    '    If GlobalVariables.boolWinXP = True Then
    '        result = systemRestore.StartRestore(txtRestorePointDescription.Text, SystemRestorePointCreator.Classes.SystemRestore.RestoreType.Checkpoint, sequenceNumber)
    '    Else
    '        result = systemRestore.StartRestore(txtRestorePointDescription.Text, SystemRestorePointCreator.Classes.SystemRestore.RestoreType.WindowsType, sequenceNumber)
    '    End If

    '    SystemRestorePointCreator.Classes.SystemRestore.EndRestore(SystemRestorePointCreator.Classes.SystemRestore.newestRestorePointID)

    '    'While oldNumberOfRestorePoints = systemRestorePoints.Get().Count
    '    '    ' Does nothing, just loops and sleeps.
    '    '    Threading.Thread.Sleep(500)
    '    'End While
    '    While oldNewestRestorePointID = Functions.getNewestSystemRestorePointID
    '        ' Does nothing, just loops and sleeps.
    '        Threading.Thread.Sleep(500)
    '    End While

    '    enableFormElements()
    '    pleaseWaitInstance.allowClose = True
    '    pleaseWaitInstance.Close()
    '    pleaseWaitInstance.Dispose()
    '    systemRestorePoints.Dispose()

    '    txtRestorePointDescription.Text = ""

    '    giveFeedbackAfterCreatingRestorePoint(result)

    '    setDoingNothingTimer.Enabled = True

    '    updateSystemRestorePointsList()

    '    If toolStripCloseAfterRestorePointIsCreated.Checked Then Me.Close()
    'End Sub

    Private Sub unifiedCreateSystemRestorePoint(Optional ByVal stringRestorePointName As String = "System Checkpoint made by System Restore Point Creator")
        Try
            If stringRestorePointName.Trim = "" Then
                MsgBox("You must enter a description for your System Restore Point.", MsgBoxStyle.Critical, Me.Text)
                Exit Sub
            End If

            disableFormElements()

            'Dim systemRestore As New SystemRestorePointCreator.Classes.SystemRestore
            Dim sequenceNumber As Long = newestSystemRestoreID + 1
            Dim result As Integer

            ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
            Dim systemRestorePoints As New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")
            'Dim oldNumberOfRestorePoints As Integer = systemRestorePoints.Get().Count
            Dim oldNewestRestorePointID As Integer = Functions.getNewestSystemRestorePointID()

            If GlobalVariables.boolWinXP = True Then
                result = Functions.createRestorePoint(stringRestorePointName, Functions.RestoreType.Checkpoint, sequenceNumber)
            Else
                result = Functions.createRestorePoint(stringRestorePointName, Functions.RestoreType.WindowsType, sequenceNumber)
            End If

            'SystemRestorePointCreator.Classes.SystemRestore.EndRestore(SystemRestorePointCreator.Classes.SystemRestore.newestRestorePointID)

            'While oldNumberOfRestorePoints = systemRestorePoints.Get().Count
            '    ' Does nothing, just loops and sleeps.
            '    Threading.Thread.Sleep(500)
            'End While
            While oldNewestRestorePointID = Functions.getNewestSystemRestorePointID
                ' Does nothing, just loops and sleeps for half a second.
                Threading.Thread.Sleep(500)
            End While

            If GlobalVariables.KeepXAmountOfRestorePoints = True And GlobalVariables.boolWinXP = False Then
                Functions.doDeletingOfXNumberOfRestorePoints(GlobalVariables.KeepXAmountofRestorePointsValue)
            End If

            enableFormElements()

            Functions.closePleaseWaitWindow()

            systemRestorePoints.Dispose()

            'If txtRestorePointDescription.Text.Trim <> defaultCustomRestorePointName Then
            '    txtRestorePointDescription.Text = ""
            'End If

            giveFeedbackAfterCreatingRestorePoint(result)

            updateSystemRestorePointsList()

            If toolStripCloseAfterRestorePointIsCreated.Checked Then Me.Close()
        Catch ex2 As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex2.Message, ex2.StackTrace, ex2.GetType)
        End Try
    End Sub

    'Private Function MakeByteArray(ByVal length As Short) As Byte()
    '    Dim tmp As String = ""

    '    For i = 1 To length
    '        tmp &= "a"
    '    Next

    '    'Dim data As String = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    '    Dim databuffer As Byte() = Encoding.ASCII.GetBytes(tmp)

    '    Return databuffer
    'End Function

    'Private Function checkForInternetConnection() As Boolean
    '    'Try
    '    '    Dim webRequest As Net.WebRequest
    '    '    Dim webResponse As Net.WebResponse
    '    '    Dim inStream As IO.StreamReader

    '    '    Debug.Write("Checking for Internet connection...")
    '    '    webRequest = Net.WebRequest.Create("http://www.toms-world.org/internetconnectioncheck.txt")
    '    '    webResponse = webRequest.GetResponse()
    '    '    inStream = New System.IO.StreamReader(webResponse.GetResponseStream())

    '    '    Dim resultTextFromURL As String = inStream.ReadToEnd.Trim.ToLower()

    '    '    webRequest = Nothing
    '    '    webResponse.Close()
    '    '    webRequest = Nothing
    '    '    inStream.Close()
    '    '    inStream.Dispose()
    '    '    inStream = Nothing

    '    '    If resultTextFromURL = "true" Then
    '    '        'debug.writeline(" Internet connection detected.")
    '    '        Return True
    '    '    Else
    '    '        'debug.writeline(" Internet connection not detected.")
    '    '        Return False
    '    '    End If
    '    'Catch ex As Exception
    '    '    'debug.writeline(" Internet connection not detected.")
    '    '    ' This should handle any and all crashes.
    '    '    Return False
    '    'End Try

    '    Try
    '        Debug.Write("Checking for Internet connection...")

    '        Dim databuffer As Byte() = MakeByteArray(10)
    '        Dim options As PingOptions = New PingOptions
    '        Dim ping As Ping, pingreply As PingReply
    '        Dim ipaddresses As System.Net.IPAddress() = System.Net.Dns.GetHostEntry("toms-world.org").AddressList

    '        options.Ttl = 64

    '        ping = New Ping()
    '        pingreply = ping.Send(ipaddresses(0).ToString, 1000, databuffer, options)

    '        If pingreply.Status = IPStatus.Success Then
    '            'debug.writeline(" Internet connection detected.")
    '            Return True
    '        Else
    '            'debug.writeline(" Internet connection not detected.")
    '            Return False
    '        End If
    '    Catch ex As Exception
    '        'debug.writeline(" Internet connection not detected.")
    '        Return False
    '    End Try
    'End Function

    Private Sub launchUpdaterApp()
        Dim fileInfo As New System.IO.FileInfo(Application.ExecutablePath)

        Dim webClient As New System.Net.WebClient

        'If Environment.Is64BitOperatingSystem = True Then
        '    webClient.Headers.Add("User-Agent", String.Format("Mozilla/5.0 (Windows NT {0}.{1}; WOW64; rv:24.0) Gecko/20130925 Firefox/24.0", Environment.OSVersion.Version.Major, Environment.OSVersion.Version.MajorRevision))
        'Else
        '    webClient.Headers.Add("User-Agent", String.Format("Mozilla/5.0 (Windows NT {0}.{1}; rv:24.0) Gecko/20130925 Firefox/24.0", Environment.OSVersion.Version.Major, Environment.OSVersion.Version.MajorRevision))
        'End If

        Functions.openPleaseWaitWindow("Downloading update... Please Wait.")

        webClient.DownloadFile(GlobalVariables.updaterURL, "updater.exe")
        webClient.Dispose()
        webClient = Nothing

        If IO.File.Exists("updater.exe") = True Then
            If Functions.verifyChecksum(GlobalVariables.updaterURLSHA1, "updater.exe", True) = False Then
                IO.File.Delete("updater.exe")
                Exit Sub
            End If
        End If

        webClient = New System.Net.WebClient

        'If Environment.Is64BitOperatingSystem = True Then
        '    webClient.Headers.Add("User-Agent", String.Format("Mozilla/5.0 (Windows NT {0}.{1}; WOW64; rv:24.0) Gecko/20130925 Firefox/24.0", Environment.OSVersion.Version.Major, Environment.OSVersion.Version.MajorRevision))
        'Else
        '    webClient.Headers.Add("User-Agent", String.Format("Mozilla/5.0 (Windows NT {0}.{1}; rv:24.0) Gecko/20130925 Firefox/24.0", Environment.OSVersion.Version.Major, Environment.OSVersion.Version.MajorRevision))
        'End If

        If My.Settings.updateChannel = GlobalVariables.updateChannelStable Then
            webClient.DownloadFile(GlobalVariables.programFileURL, fileInfo.Name & ".new")
            'webClient.DownloadFile(GlobalVariables.programFileURLSHA1, fileInfo.Name & ".new.sha1")

            If IO.File.Exists(fileInfo.Name & ".new") = True Then
                If Functions.verifyChecksum(GlobalVariables.programFileURLSHA1, fileInfo.Name & ".new", True) = False Then
                    IO.File.Delete(fileInfo.Name & ".new")
                    Exit Sub
                End If
            End If
        ElseIf My.Settings.updateChannel = GlobalVariables.updateChannelBeta Then
            webClient.DownloadFile(GlobalVariables.programFileURLBeta, fileInfo.Name & ".new")
            'webClient.DownloadFile(GlobalVariables.programFileURLBetaSHA1, fileInfo.Name & ".new.sha1")

            If IO.File.Exists(fileInfo.Name & ".new") = True Then
                If Functions.verifyChecksum(GlobalVariables.programFileURLBetaSHA1, fileInfo.Name & ".new", True) = False Then
                    IO.File.Delete(fileInfo.Name & ".new")
                    Exit Sub
                End If
            End If

            If IO.File.Exists(IO.Path.Combine(fileInfo.DirectoryName, "Restore Point Creator.pdb")) = True Then
                IO.File.Delete(IO.Path.Combine(fileInfo.DirectoryName, "Restore Point Creator.pdb"))
            End If

            webClient.DownloadFile(GlobalVariables.programDebugFileURL, IO.Path.Combine(fileInfo.DirectoryName, "Restore Point Creator.pdb"))

            If IO.File.Exists("Restore Point Creator.pdb") = True Then
                If Functions.verifyChecksum(GlobalVariables.programDebugFileSHA1URL, "Restore Point Creator.pdb", False) = False Then
                    MsgBox("Debug file checksum doesn't match")
                    IO.File.Delete("Restore Point Creator.pdb")
                End If
            End If
        End If

        webClient.Dispose()
        webClient = Nothing

        'Dim bytes() As Byte = webClient.DownloadData(updaterURL)
        'My.Computer.FileSystem.WriteAllBytes("updater.exe", bytes, False)

        'bytes = Nothing

        'webClient = New System.Net.WebClient
        'bytes = webClient.DownloadData(programFileURL)
        'My.Computer.FileSystem.WriteAllBytes(fileInfo.Name & ".new", bytes, False)

        'bytes = Nothing
        'webClient = Nothing
        fileInfo = Nothing

        If GlobalVariables.boolWinXP = True Then
            Process.Start(GlobalVariables.updaterFileName, String.Format("--file={0}{1}{0}", Chr(34), Application.ExecutablePath))
        Else
            Dim startInfo As New ProcessStartInfo
            startInfo.FileName = GlobalVariables.updaterFileName
            startInfo.Arguments = String.Format("--file={0}{1}{0}", Chr(34), Application.ExecutablePath)
            startInfo.Verb = "runas"
            Process.Start(startInfo)
        End If

        Me.Close()
        Functions.closePleaseWaitWindow()
        Application.Exit()
    End Sub

    Private Sub formLoadCheckForUpdatesRoutine()
        If My.Settings.CheckForUpdates = True Then
            toolStripAutomaticallyCheckForUpdates.Checked = True

            If My.Settings.ProgramExecutionsSinceLastUpdateCheck >= 50 Or Math.Abs(DateDiff(DateInterval.Day, Now, My.Settings.lastUpdateTime)) >= My.Settings.checkForUpdatesEveryInDays Then

                My.Settings.ProgramExecutionsSinceLastUpdateCheck = 0
                My.Settings.Save()

                If Functions.checkForInternetConnection() = False Then
                    MsgBox("No Internet connection detected.", MsgBoxStyle.Information, Me.Text)
                Else
                    My.Settings.lastUpdateTime = Now
                    My.Settings.Save()

                    ''debug.writeline("internet connection detected")
                    'Dim inStream As System.IO.StreamReader
                    'Dim webRequest As Net.WebRequest
                    'Dim webresponse As Net.WebResponse

                    Try
                        Dim version() As String = Application.ProductVersion.Split(".".ToCharArray) ' Gets the program version

                        Dim majorVersion As Short = Short.Parse(version(0))
                        Dim minorVersion As Short = Short.Parse(version(1))
                        Dim buildVersion As Short = Short.Parse(version(2))

                        'If My.Settings.updateChannel = GlobalVariables.updateChannelBeta Then
                        '    webRequest = Net.WebRequest.Create(String.Format("{0}{1}.{2}", programUpdateCheckerURLBeta, version(0), version(1)))
                        'Else
                        '    webRequest = Net.WebRequest.Create(String.Format("{0}{1}.{2}", programUpdateCheckerURL, version(0), version(1)))
                        'End If

                        ''If Environment.Is64BitOperatingSystem = True Then
                        ''    webRequest.Headers.Add("User-Agent", String.Format("Mozilla/5.0 (Windows NT {0}.{1}; WOW64; rv:24.0) Gecko/20130925 Firefox/24.0", Environment.OSVersion.Version.Major, Environment.OSVersion.Version.MajorRevision))
                        ''Else
                        ''    webRequest.Headers.Add("User-Agent", String.Format("Mozilla/5.0 (Windows NT {0}.{1}; rv:24.0) Gecko/20130925 Firefox/24.0", Environment.OSVersion.Version.Major, Environment.OSVersion.Version.MajorRevision))
                        ''End If

                        'webresponse = webRequest.GetResponse()
                        'inStream = New System.IO.StreamReader(webresponse.GetResponseStream())
                        'Dim strRemoteBuild As String = inStream.ReadToEnd.Trim()
                        'Dim shortRemoteBuild As Short

                        'inStream.Close()
                        'inStream.Dispose()
                        'inStream = Nothing

                        Dim strRemoteBuild As String
                        Dim shortRemoteBuild As Short

                        If My.Settings.updateChannel = GlobalVariables.updateChannelBeta Then
                            strRemoteBuild = Functions.getWebPageData(String.Format("{0}{1}.{2}", GlobalVariables.programUpdateCheckerURLBeta, version(0), version(1)))
                        ElseIf My.Settings.updateChannel = GlobalVariables.updateChannelStable Then
                            strRemoteBuild = Functions.getWebPageData(String.Format("{0}{1}.{2}", GlobalVariables.programUpdateCheckerURL, version(0), version(1)))
                        End If

                        If strRemoteBuild = Functions.ERROR_WEBREQUEST Then
                            MsgBox("There was an error checking for a software update; update check aborted. Please see the Event Log for more information regarding this error message.", MsgBoxStyle.Information, Me.Text)
                            Exit Sub
                        End If

                        Dim changeLog As String
                        If strRemoteBuild.Contains("beta") = False Then
                            changeLog = Functions.getWebPageData("http://www.toms-world.org/readFirstEntryFromRestorePointCreatorChangeLog.php?nohtml=true")
                        End If

                        'debug.writeline("strRemoteBuild = " & strRemoteBuild)

                        ' This handles entirely new versions, not just new builds.
                        If strRemoteBuild.Contains("newversion") = True Then
                            ' Example: newversion-1.2
                            Dim strRemoteBuildParts As String() = strRemoteBuild.Split("-")
                            'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                            MsgBox(String.Format("{3} version {0}.{1} is no longer supported and has been replaced by version {2}." & vbCrLf & vbCrLf & changeLog, majorVersion, minorVersion, strRemoteBuildParts(1), GlobalVariables.programName), MsgBoxStyle.Information, Me.Text)
                            launchUpdaterApp()
                            Exit Sub
                        ElseIf strRemoteBuild.Contains("beta") = True Then
                            Dim strRemoteBuildParts As String() = strRemoteBuild.Split("-")

                            If strRemoteBuildParts(1) > buildVersion Then
                                'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                                MsgBox(String.Format("There is an updated version of {0}. The update will now download.", GlobalVariables.programName), MsgBoxStyle.Information, Me.Text & " Version Checker")
                                launchUpdaterApp()
                                Exit Sub
                            End If
                        ElseIf strRemoteBuild.Contains("minor") = True Then
                            Dim strRemoteBuildParts As String() = strRemoteBuild.Split("-")
                            'debug.writeline(strRemoteBuildParts.ToString)

                            Dim minorBuildApplicables As New Specialized.StringCollection

                            If strRemoteBuildParts(2).Contains(",") Then
                                minorBuildApplicables.AddRange(strRemoteBuildParts(2).ToString.Trim.Split(","))
                            Else
                                minorBuildApplicables.Add(strRemoteBuildParts(2).ToString.Trim)
                            End If

                            'debug.writeline("minorBuildApplicables = " & minorBuildApplicables.ToString)

                            ' We are only doing mandatory updates in this routine, not minor updates. That's why there is such a huge commented out code block below.
                            If strRemoteBuildParts(1) > buildVersion And minorBuildApplicables.Contains(buildVersion.ToString) = False Then
                                'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                                launchUpdaterApp()
                                Exit Sub
                            End If

                            'If strRemoteBuildParts(1) > buildVersion And strRemoteBuildParts2Split.Contains(buildVersion.ToString) = True Then
                            '    Dim updateQuestion As MsgBoxResult = MsgBox("There is an update available but it's classified as a minor update.  It's not a required update so if you do not want to update the program at this time, it is OK to keep using the version you have." & vbCrLf & vbCrLf & changeLog & vbCrLf & vbCrLf & "Do you want to download the update?", MsgBoxStyle.Information + MsgBoxStyle.YesNo, Me.Text)
                            '    If updateQuestion = MsgBoxResult.Yes Then
                            '        launchUpdaterApp()
                            '        Exit Sub
                            '    End If
                            'ElseIf strRemoteBuildParts(1) > buildVersion And strRemoteBuildParts2Split.Contains(buildVersion.ToString) = False Then
                            '    launchUpdaterApp()
                            '    Exit Sub
                            'End If

                            minorBuildApplicables.Clear()
                            minorBuildApplicables = Nothing
                        ElseIf Short.TryParse(strRemoteBuild, shortRemoteBuild) = True Then
                            If shortRemoteBuild > buildVersion Then
                                'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {3}.", majorVersion, minorVersion, buildVersion, shortRemoteBuild), EventLogEntryType.Information)
                                MsgBox(String.Format("There is an updated version of {0}. The update will now download." & vbCrLf & vbCrLf & changeLog, GlobalVariables.programName), MsgBoxStyle.Information, Me.Text & " Version Checker")
                                launchUpdaterApp()
                            End If
                        End If
                    Catch ex As Exception
                        ' Ok, we crashed but who cares.  We give an error message.
                        'MsgBox("Error while checking for new version.", MsgBoxStyle.Information, Me.Text)
                    End Try
                End If
            Else
                My.Settings.ProgramExecutionsSinceLastUpdateCheck += 1
                My.Settings.Save()
            End If
        Else
            toolStripAutomaticallyCheckForUpdates.Checked = False
        End If
    End Sub

    Sub startSystemRestorePointListLoadThread()
        Functions.openPleaseWaitWindow("Loading Restore Points... Please Wait.")

        ' OK, now let's load the System Restore Points.  This could take awhile so we do this in a secondary thread so as to not hang up the program's primary thread.
        updateRestorePointListThread = New Threading.Thread(AddressOf updateSystemRestorePointsList)
        updateRestorePointListThread.Name = "System Restore Point List Updating Thread"
        updateRestorePointListThread.Priority = Threading.ThreadPriority.Normal
        updateRestorePointListThread.Start()
    End Sub

    Private Sub updateSystemRestorePointsList() 'Adds all Restore Points to a ListView
        ' Declares some variables.
        Dim systemRestoreIDs As New ArrayList ' Creates an ArrayList for us to put our System Restore IDs into for later checking for the newest System Restore Point ID.
        Dim systemRestorePoints As ManagementObjectSearcher
        Dim itemAdd As ListViewItem
        Dim itemsToPutInToList As New List(Of ListViewItem)
        Dim boolPM As Boolean = False
        Dim dateTime As DateTime
        'Dim systemRestorePointClass As New SystemRestorePointCreator.Classes.SystemRestore

        'debug.writeline("restorePointDateData.Count = " & restorePointDateData.Count)
        ' We need to check if we have
        If restorePointDateData.Count <> 0 Then
            restorePointDateData.Clear()
        End If
        'debug.writeline("restorePointDateData.Count = " & restorePointDateData.Count)

        Try
            btnRefreshRestorePoints.Text = "Abort Refreshing System Restore Points"

            systemRestorePointsList.Enabled = False
            systemRestorePointsList.Items.Clear() ' Clears the System Restore Points list on the GUI of existing items.

            newestSystemRestoreID = 0 ' Resets the newest System Restore ID to 0.

            ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
            systemRestorePoints = New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")

            If systemRestorePoints.Get() IsNot Nothing Then
                ' Checks to see if there are any System Restore Points to be listed.
                If (systemRestorePoints.Get().Count = 0) = False Then
                    'Dim index As Integer = 0

                    ' Loops through systemRestorePoints.
                    For Each systemRestorePoint As ManagementObject In systemRestorePoints.Get()
                        If (systemRestorePoint("SequenceNumber") IsNot Nothing) And (systemRestorePoint("CreationTime") IsNot Nothing) And (systemRestorePoint("Description") IsNot Nothing) And (systemRestorePoint("RestorePointType") IsNot Nothing) Then
                            'index += 1

                            ' Adds a System Restore Point to a list of System Restore Points with the Restore Point ID as a Key
                            itemAdd = New ListViewItem(systemRestorePoint("SequenceNumber").ToString)

                            If restorePointDateData.Keys.Contains(systemRestorePoint("SequenceNumber")) = False Then
                                restorePointDateData.Add(systemRestorePoint("SequenceNumber"), systemRestorePoint("CreationTime"))
                                'debug.writeline("Added restore point id " & systemRestorePoint("SequenceNumber").ToString)
                            End If

                            'If My.Settings.savedRestorePointIDs.Contains(systemRestorePoint(systemRestorePointDataType.SequenceNumber.ToString).ToString) Then
                            '    itemAdd.Checked = True
                            'End If

                            ' Adds the System Restore Point ID to our list of System Restore Point IDs to calculate the newest System Restore Point.
                            systemRestoreIDs.Add(Integer.Parse(systemRestorePoint("SequenceNumber")))

                            ''debug.writeline(String.Format("Name: {0} -- Type: {1} -- Raw Type: {2}", systemRestorePoint(systemRestorePointDataType.Description.ToString), systemRestorePointClass.whatTypeIsIt(Integer.Parse(systemRestorePoint(systemRestorePointDataType.RestorePointType.ToString))), systemRestorePoint(systemRestorePointDataType.RestorePointType.ToString)))

                            ' Prevents a rare crash when loading System Restore Points that don't have a description.
                            ' Normally this shouldn't happen at all but if it does, this prevents the program from
                            ' crashing.  It essentially prevents a Null Reference Exception in a cleaner way.
                            If (systemRestorePoint("Description") Is Nothing) Then
                                ' Yep, we have that weird situation.  Let's handle it by filling the description in with something.
                                itemAdd.SubItems.Add("(None specified, this is weird!")
                            Else
                                ' Things are normal, we don't have to do anything special.  We only have to take the description and put it in the list as normal.
                                itemAdd.SubItems.Add(systemRestorePoint("Description").ToString)
                            End If

                            If systemRestorePoint("CreationTime").ToString.Trim <> "" Then
                                dateTime = Functions.parseSystemRestorePointCreationDate(systemRestorePoint("CreationTime"))
                                itemAdd.SubItems.Add(String.Format("{0} {1}", dateTime.ToShortDateString, dateTime.ToLongTimeString))
                            Else
                                itemAdd.SubItems.Add("(Error Parsing Date)")
                            End If

                            ''debug.writeline("name = " & systemRestorePoint(systemRestorePointDataType.Description.ToString).ToString & " | type number = " & systemRestorePoint(systemRestorePointDataType.RestorePointType.ToString).ToString)

                            If systemRestorePoint("Description").ToString.ToLower.Contains("windows update") Then
                                If My.Settings.debug = True Then
                                    itemAdd.SubItems.Add("Windows Update" & " (" & systemRestorePoint("RestorePointType").ToString & ")")
                                Else
                                    itemAdd.SubItems.Add("Windows Update")
                                End If
                            ElseIf systemRestorePoint("Description").ToString.ToLower.Contains("system checkpoint") Then
                                If My.Settings.debug = True Then
                                    itemAdd.SubItems.Add("System Checkpoint" & " (" & systemRestorePoint("RestorePointType").ToString & ")")
                                Else
                                    itemAdd.SubItems.Add("System Checkpoint")
                                End If
                            Else
                                If My.Settings.debug = True Then
                                    itemAdd.SubItems.Add(Functions.whatTypeIsIt(Integer.Parse(systemRestorePoint("RestorePointType").ToString)) & " (" & systemRestorePoint("RestorePointType").ToString & ")")
                                Else
                                    itemAdd.SubItems.Add(Functions.whatTypeIsIt(Integer.Parse(systemRestorePoint("RestorePointType").ToString)))
                                    'MsgBox(systemRestorePoint("Description") & " -- " & systemRestorePoint("EventType"))
                                End If
                            End If

                            dateTime = Nothing

                            'If systemRestorePoints.Get().Count = index Then
                            '    'newestSystemRestoreID = systemRestorePoint(systemRestorePointDataType.SequenceNumber.ToString).ToString
                            '    itemAdd.Font = New Font(itemAdd.Font.FontFamily, itemAdd.Font.SizeInPoints, FontStyle.Bold)
                            'End If

                            ' Adds the item to the list.
                            itemsToPutInToList.Add(itemAdd)
                            itemAdd = Nothing
                        End If
                    Next

                    systemRestorePoints.Dispose()
                    systemRestorePoints = Nothing

                    ' Adds the list of System Restore Points that we created earlier in this routine to the System Restore Points list on the GUI.
                    systemRestorePointsList.Items.AddRange(itemsToPutInToList.ToArray())

                    ' Does some sorting on the System Restore Points list on the GUI.
                    systemRestorePointsList.Sort()

                    If systemRestoreIDs.Count <> 0 Then
                        ' First, we convert the ArrayList into an Integer then calculate the Max value of all of the Integers in the Integer Array.
                        ' This gets the latest System Restore Point ID for later checking to see if the user is deleting the newest System Restore Point.
                        newestSystemRestoreID = CType(systemRestoreIDs.ToArray(GetType(Integer)), Integer()).Max
                    End If

                    For i = 0 To systemRestorePointsList.Items.Count - 1
                        If Integer.Parse(systemRestorePointsList.Items.Item(i).SubItems(0).Text) = newestSystemRestoreID Then
                            systemRestorePointsList.Items.Item(i).Font = New Font(systemRestorePointsList.Items.Item(i).Font.FontFamily, systemRestorePointsList.Items.Item(i).Font.SizeInPoints, FontStyle.Bold)
                        End If
                    Next
                Else
                    newestSystemRestoreID = 0
                End If
            Else
                newestSystemRestoreID = 0
            End If
        Catch ex6 As ObjectDisposedException
            Functions.writeCrashToEventLog(ex6)

            If systemRestorePoints IsNot Nothing Then
                systemRestorePoints.Dispose()
                systemRestorePoints = Nothing
            End If

            Try
                If windowInstances.frmPleaseWait IsNot Nothing Then
                    windowInstances.frmPleaseWait.allowClose = True
                    windowInstances.frmPleaseWait.Close()
                    windowInstances.frmPleaseWait.Dispose()
                End If
            Catch ex As Exception
            End Try

            startSystemRestorePointListLoadThread()

            Exit Sub
        Catch ex5 As UnauthorizedAccessException
            Functions.writeCrashToEventLog(ex5)
        Catch ex4 As System.Management.ManagementException
            Functions.writeCrashToEventLog(ex4)
        Catch ex As Threading.ThreadAbortException
            ' Does nothing
        Catch ex3 As System.Runtime.InteropServices.COMException
            Functions.giveComExceptionCrashMessage()
        Catch ex2 As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex2.Message, ex2.StackTrace, ex2.GetType)
        Finally
            If systemRestorePoints IsNot Nothing Then
                systemRestorePoints.Dispose()
                systemRestorePoints = Nothing
            End If

            Try
                If windowInstances.frmPleaseWait IsNot Nothing Then
                    windowInstances.frmPleaseWait.allowClose = True
                    windowInstances.frmPleaseWait.Close()
                    windowInstances.frmPleaseWait.Dispose()
                End If
            Catch ex As Exception
            End Try

            systemRestorePointsList.Enabled = True

            ' Cleans up some memory.
            'systemRestoreIDs = Nothing
            systemRestorePoints = Nothing
            itemsToPutInToList = Nothing
            itemAdd = Nothing
            'systemRestorePointClass = Nothing
            GC.Collect()

            lblCurrentRestorePointsLabel.Text = String.Format("Current Restore Points ({0})", systemRestorePointsList.Items.Count)

            btnRefreshRestorePoints.Text = "Refresh List of System Restore Points"

            btnRestoreToRestorePoint.Enabled = False
            stripRestore.Enabled = False

            stripRestoreSafeMode.Enabled = False
            btnRestoreToRestorePointSafeMode.Enabled = False

            btnDeleteRestorePoint.Enabled = False
            stripDelete.Enabled = False
        End Try
    End Sub

    Sub restoreSystemRestorePoint()
        'Dim systemRestorePointClass As SystemRestorePointCreator.Classes.SystemRestore

        Try
            'systemRestorePointClass = New SystemRestorePointCreator.Classes.SystemRestore
            'Dim sequenceNumber As Long = newestSystemRestoreID + 1

            'Try
            '    SystemRestorePointCreator.Classes.SystemRestore.StartRestore(String.Format("Restored system back to Restore Point {0}{1}{0}", Chr(34), systemRestorePointsList.SelectedItems(0).SubItems(1).Text), SystemRestorePointCreator.Classes.SystemRestore.RestoreType.Restore, sequenceNumber)
            'Catch ex As Exception
            '    Dim answer As MsgBoxResult = MsgBox("Unable to set System Restore Point prior to restoring system back to user defined System Restore Point." & vbCrLf & vbCrLf & ex.Message & vbCrLf & vbCrLf & "Do you want to continue anyways?", MsgBoxStyle.Critical + MsgBoxStyle.YesNo, "Critical Error")

            '    If answer = Microsoft.VisualBasic.MsgBoxResult.No Then
            '        enableFormElements()
            '        Exit Sub
            '    End If
            'End Try

            'systemRestorePointClass = Nothing

            Try
                disableFormElements()

                Dim systemRestorePointIndex As Integer = Integer.Parse(systemRestorePointsList.SelectedItems(0).SubItems(0).Text)
                'systemRestorePointClass = New SystemRestorePointCreator.Classes.SystemRestore
                Functions.restoreToSystemRestorePoint(systemRestorePointIndex)

                Functions.closePleaseWaitWindow()
            Catch ex As Exception
                MsgBox("Unable to restore system back to user defined System Restore Point." & vbCrLf & vbCrLf & ex.Message, MsgBoxStyle.Critical, "Critical Error")
            End Try
        Catch ex As Threading.ThreadAbortException
            ' Does nothing.
        Finally
            enableFormElements()
        End Try
    End Sub

    Private Sub deleteSystemRestorePoint()
        Try
            ' Now we declare some variables.
            Dim selectedItem As ListViewItem
            Dim j As Integer
            'Dim systemRestore As New SystemRestorePointCreator.Classes.SystemRestore ' Creates an instance of the SystemRestore class.
            Dim dateData As Date

            systemRestorePointsList.Enabled = False
            btnCreateSystemCheckpoint.Enabled = False
            txtRestorePointDescription.Enabled = False
            btnCreate.Enabled = False
            toolStripAutomaticallyCheckForUpdates.Enabled = False
            toolStripConfirmDeletions.Enabled = False
            toolStripCloseAfterRestorePointIsCreated.Enabled = False
            btnRefreshRestorePoints.Enabled = False
            btnDeleteRestorePoint.Enabled = False

            stripRestore.Enabled = False
            stripRestoreSafeMode.Enabled = False
            btnRestoreToRestorePoint.Enabled = False
            btnRestoreToRestorePointSafeMode.Enabled = False

            toolStripAbout.Enabled = False
            toolStripCheckForUpdates.Enabled = False

            Dim boolMultipleRestorePointsDeleted As Boolean = False
            If systemRestorePointsList.SelectedItems.Count > 1 Then
                boolMultipleRestorePointsDeleted = True
            End If

            deleteProgressBar.Visible = True
            deleteProgressBar.Maximum = systemRestorePointsList.SelectedItems.Count
            deleteProgressBar.Value = 0

            ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
            Dim systemRestorePoints As New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")
            Dim oldNumberOfRestorePoints As Integer = systemRestorePoints.Get().Count

            If systemRestorePointsList.SelectedItems.Count <> 0 Then
                For j = 0 To systemRestorePointsList.SelectedItems.Count - 1
                    deleteProgressBar.Value += 1

                    selectedItem = systemRestorePointsList.SelectedItems(0) ' We need to save this selected item so we put an instance of the object into the selectedItem variable.

                    If AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked = False Then
                        ' Checks to see if the user is trying to delete the newest System Restore Point based upon ID.
                        If Integer.Parse(selectedItem.SubItems(0).Text) = newestSystemRestoreID Then
                            ' Yep, the user is trying to do that.  Stupid user, now we give that stupid user a message to prevent his/her stupidity.
                            MsgBox("You can't delete the most recent System Restore Point.  This is for your own protection.", MsgBoxStyle.Information, Me.Text)
                            Exit Sub
                        End If
                    End If

                    Dim confirmation As MsgBoxResult = MsgBoxResult.No ' Gives the confirmation variable a default value of No.

                    ' Checks to see if the user wants to confirm deletions.
                    If toolStripConfirmDeletions.Checked Then
                        If (windowInstances.frmPleaseWait Is Nothing) = False Then
                            windowInstances.frmPleaseWait.TopMost = False
                            Functions.disableFocusingOnPleaseWaitWindow()
                        End If

                        ' Yep, so ask the user.
                        confirmation = MsgBox("Are you sure you want to delete this System Restore Point?" & vbCrLf & vbCrLf & "Restore Point Description: " & selectedItem.SubItems(1).Text & vbCrLf & "Created On: " & selectedItem.SubItems(2).Text, MsgBoxStyle.YesNo + MsgBoxStyle.Question, Me.Text)

                        If (windowInstances.frmPleaseWait Is Nothing) = False Then
                            windowInstances.frmPleaseWait.TopMost = True
                            Functions.enableFocusingOnPleaseWaitWindow()
                        End If
                    Else
                        ' No, so we give the variable a value of Yes without asking the user.
                        confirmation = MsgBoxResult.Yes
                    End If

                    ' Checks to see if the user said yes.
                    If confirmation = MsgBoxResult.Yes Then
                        If toolStripLogRestorePointDeletions.Checked Then
                            If restorePointDateData(selectedItem.SubItems(0).Text).Trim <> "" And toolStripLogRestorePointDeletions.Checked Then
                                dateData = Functions.parseSystemRestorePointCreationDate(restorePointDateData(selectedItem.SubItems(0).Text))
                                Functions.writeToSystemEventLog(String.Format("The user {3}/{4} deleted the restore point named ""{0}"" which was created on {1} at {2}.", selectedItem.SubItems(1).Text, dateData.ToShortDateString, dateData.ToShortTimeString, Environment.MachineName, Environment.UserName), EventLogEntryType.Information)
                                dateData = Nothing
                            End If
                        End If

                        Functions.SRRemoveRestorePoint(Integer.Parse(selectedItem.SubItems(0).Text)) ' Deletes the Restore Point.

                        If systemRestorePointsList.SelectedIndices(0) >= 0 Then
                            systemRestorePointsList.Items.RemoveAt(systemRestorePointsList.SelectedIndices(0)) ' Removes the Restore Point from the list.
                        End If

                        If systemRestorePointsList.SelectedItems.Count = 0 Then
                            While oldNumberOfRestorePoints = systemRestorePoints.Get().Count
                                Threading.Thread.Sleep(500)
                                ' Does nothing, just loops.
                            End While

                            systemRestorePoints.Dispose()

                            Functions.closePleaseWaitWindow()

                            If ShowMessageBoxAfterSuccessfulDeletionOfRestorePointsToolStripMenuItem.Checked Then
                                If (windowInstances.frmPleaseWait Is Nothing) = False Then windowInstances.frmPleaseWait.TopMost = False

                                If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
                                    If boolMultipleRestorePointsDeleted = True Then
                                        MsgBox("System Restore Points Deleted.", MsgBoxStyle.Information, Me.Text) ' Gives some feedback.
                                    Else
                                        MsgBox("System Restore Point Deleted.", MsgBoxStyle.Information, Me.Text) ' Gives some feedback.
                                    End If
                                Else
                                    If boolMultipleRestorePointsDeleted = True Then
                                        NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "System Restore Points Deleted.", ToolTipIcon.Info) ' Gives some feedback.
                                    Else
                                        NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "System Restore Point Deleted.", ToolTipIcon.Info) ' Gives some feedback.
                                    End If
                                End If

                                If (windowInstances.frmPleaseWait Is Nothing) = False Then windowInstances.frmPleaseWait.TopMost = True
                            End If
                        End If
                    Else
                        If (windowInstances.frmPleaseWait Is Nothing) = False Then windowInstances.frmPleaseWait.TopMost = False
                        MsgBox("The System Restore Point was not deleted.", MsgBoxStyle.Information, Me.Text) ' Gives some feedback.
                        If (windowInstances.frmPleaseWait Is Nothing) = False Then windowInstances.frmPleaseWait.TopMost = True
                    End If
                Next
            End If

            'systemRestore = Nothing ' Removes the instance of the SystemRestore class from memory.
        Catch ex As Threading.ThreadAbortException
            MsgBox("System Restore Point Deletion Process Aborted.", MsgBoxStyle.Information, Me.Text)
        Catch ex2 As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex2.Message, ex2.StackTrace, ex2.GetType)
        Finally
            deleteProgressBar.Visible = False
            deleteProgressBar.Maximum = 1
            deleteProgressBar.Value = 0

            systemRestorePointsList.Enabled = True

            If Functions.areWeInSafeMode() = False Then
                btnCreateSystemCheckpoint.Enabled = True
                btnCreate.Enabled = True
                txtRestorePointDescription.Enabled = True
            End If

            toolStripAutomaticallyCheckForUpdates.Enabled = True
            toolStripConfirmDeletions.Enabled = True
            toolStripCloseAfterRestorePointIsCreated.Enabled = True
            btnRefreshRestorePoints.Enabled = True
            btnDeleteRestorePoint.Enabled = True

            If GlobalVariables.boolWinXP = False And Functions.areWeInSafeMode = False Then
                stripRestoreSafeMode.Enabled = True
                btnRestoreToRestorePointSafeMode.Enabled = True
            End If

            btnRestoreToRestorePoint.Enabled = True
            stripRestore.Enabled = True

            If GlobalVariables.boolWinXP = False Then
                btnRestoreToRestorePointSafeMode.Enabled = True
                stripRestoreSafeMode.Enabled = True
            End If

            toolStripAbout.Enabled = True
            toolStripCheckForUpdates.Enabled = True

            updateSystemRestorePointsList() ' Calls our central sub-routine to update the List of System Restore Points list on the GUI.

            Threading.Thread.Sleep(4000)
        End Try
    End Sub

    Private Sub deleteOldRestorePoints()
        Try
            ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
            Dim systemRestorePoints As ManagementObjectSearcher = New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")
            Dim oldNumberOfRestorePoints As Integer = systemRestorePoints.Get().Count
            Dim systemRestorePointCreationDate As Date
            Dim dateDiffResults As Short
            Dim numberOfOldRestorePointsDeleted As Short = 0

            If toolStripLogRestorePointDeletions.Checked Then
                Functions.writeToSystemEventLog(String.Format("The user {0}\{1} began batch processing and deletion of old System Restore Points.", Environment.MachineName, Environment.UserName), EventLogEntryType.Information)
            End If

            ' Loops through systemRestorePoints.
            For Each systemRestorePoint As ManagementObject In systemRestorePoints.Get()
                If (systemRestorePoint("CreationTime") Is Nothing) = False Then
                    systemRestorePointCreationDate = Functions.parseSystemRestorePointCreationDate(systemRestorePoint("CreationTime"))

                    dateDiffResults = DateDiff(DateInterval.Day, systemRestorePointCreationDate, Date.Now)

                    If dateDiffResults >= maxDays Then
                        Functions.SRRemoveRestorePoint(Integer.Parse(systemRestorePoint("SequenceNumber"))) ' Deletes the Restore Point.

                        If toolStripLogRestorePointDeletions.Checked Then
                            numberOfOldRestorePointsDeleted += 1
                            Functions.writeToSystemEventLog(String.Format("Deleted Restore Point named ""{0}"" which was created on {1} at {2}.", systemRestorePoint("Description"), systemRestorePointCreationDate.ToLongDateString, systemRestorePointCreationDate.ToShortTimeString), EventLogEntryType.Information)
                        End If
                    End If

                    systemRestorePointCreationDate = Nothing
                End If

                systemRestorePoint.Dispose()
                systemRestorePoint = Nothing
            Next

            While oldNumberOfRestorePoints = systemRestorePoints.Get().Count
                Threading.Thread.Sleep(500)
                ' Does nothing, just loops.
            End While

            Functions.closePleaseWaitWindow()

            If toolStripLogRestorePointDeletions.Checked Then
                If numberOfOldRestorePointsDeleted = 0 Then
                    Functions.writeToSystemEventLog("End of processing old System Restore Points. No old System Restore Point were deleted.", EventLogEntryType.Information)
                ElseIf numberOfOldRestorePointsDeleted = 1 Then
                    Functions.writeToSystemEventLog("End of processing old System Restore Points. 1 old System Restore Point was deleted.", EventLogEntryType.Information)
                Else
                    Functions.writeToSystemEventLog(String.Format("End of processing old System Restore Points. {0} old System Restore Points were deleted.", numberOfOldRestorePointsDeleted), EventLogEntryType.Information)
                End If
            End If

            systemRestorePoints.Dispose()
            systemRestorePoints = Nothing

            updateSystemRestorePointsList()
        Catch ex As Threading.ThreadAbortException
            ' Does nothing
        Catch ex2 As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex2.Message, ex2.StackTrace, ex2.GetType)
        Finally
            toolStripDeleteOldRestorePoints.Enabled = True
            btnDeleteRestorePoint.Enabled = True
            stripDelete.Enabled = True
        End Try
    End Sub
#End Region

#Region "--== Misc. Event Code ==--"
    'Private Sub systemRestorePointsList_Click(sender As Object, e As EventArgs) Handles systemRestorePointsList.Click
    '    doTheGrayingOfTheRestorePointNameTextBox()
    'End Sub

    Private Sub systemRestorePointsList_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles systemRestorePointsList.SelectedIndexChanged
        If systemRestorePointsList.SelectedItems.Count > 1 Then
            btnRestoreToRestorePoint.Enabled = False
            stripRestore.Enabled = False

            stripRestoreSafeMode.Enabled = False
            btnRestoreToRestorePointSafeMode.Enabled = False

            ToolTip.SetToolTip(btnRestoreToRestorePoint, "Disabled because you can't have multiple Restore Points to use the Restore function.")
        Else
            btnRestoreToRestorePoint.Enabled = True
            stripRestore.Enabled = True

            If GlobalVariables.boolWinXP = False And Functions.areWeInSafeMode = False Then
                stripRestoreSafeMode.Enabled = True
                btnRestoreToRestorePointSafeMode.Enabled = True
            End If

            ToolTip.SetToolTip(btnRestoreToRestorePoint, "")
        End If

        If GlobalVariables.boolWinXP = False Then
            If systemRestorePointsList.SelectedItems.Count = 1 Then
                btnDeleteRestorePoint.Text = "Delete Selected Restore Point"
                stripDelete.Text = "&Delete Selected Restore Point"
            Else
                btnDeleteRestorePoint.Text = "Delete Selected Restore Points"

                stripDelete.Text = "&Delete Selected Restore Points"
            End If

            btnDeleteRestorePoint.Enabled = True
            stripDelete.Enabled = True
            ToolTip.SetToolTip(btnDeleteRestorePoint, "")
        End If

        If systemRestorePointsList.SelectedItems.Count = 1 Then
            btnRestoreToRestorePoint.Enabled = True
            stripRestore.Enabled = True

            If GlobalVariables.boolWinXP = False And Functions.areWeInSafeMode = False Then
                stripRestoreSafeMode.Enabled = True
                btnRestoreToRestorePointSafeMode.Enabled = True
            End If

            If GlobalVariables.boolWinXP = False Then
                btnDeleteRestorePoint.Enabled = True
                stripDelete.Enabled = True
            End If
        ElseIf systemRestorePointsList.SelectedItems.Count = 0 Then
            btnRestoreToRestorePoint.Enabled = False
            stripRestore.Enabled = False
            stripRestoreSafeMode.Enabled = False
            btnRestoreToRestorePointSafeMode.Enabled = False

            btnDeleteRestorePoint.Enabled = False
            stripDelete.Enabled = False
        End If

        If AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked = False Then
            For i = 0 To systemRestorePointsList.SelectedItems.Count - 1
                If Integer.Parse(systemRestorePointsList.SelectedItems(i).SubItems(0).Text) = newestSystemRestoreID Then
                    btnDeleteRestorePoint.Enabled = False
                    stripDelete.Enabled = False
                    ToolTip.SetToolTip(btnDeleteRestorePoint, "Disabled because you have the latest System Restore Point selected as part of the group of selected System Restore Points.")
                    Exit Sub
                End If
            Next
        End If
    End Sub

    Private Sub Form1_FormClosing(sender As Object, e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        If (updateRestorePointListThread Is Nothing) = False Then
            updateRestorePointListThread.Abort()
        End If

        If GlobalVariables.boolLogLoadsAndExitsToEventLog = True Then Functions.writeToSystemEventLog("The user " & Environment.UserName & " closed the program.", EventLogEntryType.Information)
    End Sub

    Private Sub Form1_ResizeEnd(sender As Object, e As System.EventArgs) Handles Me.ResizeEnd
        My.Settings.windowSize = Me.Size
        My.Settings.Save()
    End Sub

    Private Sub Form1_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyUp
        If e.KeyCode = Keys.F5 Then
            Functions.openPleaseWaitWindow("Loading Restore Points... Please Wait.")

            updateRestorePointListThread = New Threading.Thread(AddressOf updateSystemRestorePointsList)
            updateRestorePointListThread.Name = "System Restore Point List Updating Thread"
            updateRestorePointListThread.Priority = Threading.ThreadPriority.Normal
            updateRestorePointListThread.Start()
        End If
    End Sub

    Sub launchDonationURL()
        Functions.launchURLInWebBrowser("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=HQL3AC96XKM42&lc=US&no_note=1&no_shipping=1&rm=1&return=http%3a%2f%2fwww%2etoms%2dworld%2eorg%2fblog%2fthank%2dyou%2dfor%2dyour%2ddonation&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted", "An error occurred when trying to launch the donation URL in your default browser. The donation URL has been copied to your Windows Clipboard for you to paste into the address bar in the browser of your choice.")
    End Sub

    Sub showDonationNotice()
        Dim registryShowDonationMessageValue As String = Microsoft.Win32.Registry.LocalMachine.OpenSubKey("SOFTWARE\Restore Point Creator").GetValue("Show Donation Message", "True").ToString.Trim
        Dim boolRegistryShowDonationMessageValue As Boolean

        If registryShowDonationMessageValue.ToLower = "true" Or registryShowDonationMessageValue.ToLower = "false" Then
            boolRegistryShowDonationMessageValue = Boolean.Parse(registryShowDonationMessageValue)
        Else
            boolRegistryShowDonationMessageValue = True
        End If

        'If boolRegistryShowDonationMessageValue = False Then
        '    toolStripDonate.Visible = False
        'End If

        If boolRegistryShowDonationMessageValue = True Then
            Dim randomNumberGenerator As New System.Random(System.DateTime.Now.Millisecond)

            If randomNumberGenerator.Next(0, 4) = randomNumberGenerator.Next(0, 4) Then
                Dim result As MsgBoxResult = MsgBox("Though this is free software, donations are welcome." & vbCrLf & vbCrLf & "Remember... donations are optional, there is no requirement to donate to use this software." & vbCrLf & vbCrLf & "Do you want to donate today?  If not, click ""No"" and you won't be asked like this again.", MsgBoxStyle.YesNo + MsgBoxStyle.Question, Me.Text)

                If result = MsgBoxResult.Yes Then
                    launchDonationURL()
                End If

                Microsoft.Win32.Registry.LocalMachine.OpenSubKey("SOFTWARE\Restore Point Creator", True).SetValue("Show Donation Message", "False", RegistryValueKind.String)
            End If
        End If
    End Sub

    'Sub showXPNotice()
    '    If GlobalVariables.boolWinXP = True Then
    '        If DateDiff(DateInterval.Day, New Date(2014, 4, 8), Now) >= 0 And My.Settings.dontBugMeAboutXP2 = False Then
    '            Dim XPMessage As New System.Text.StringBuilder()
    '            XPMessage.AppendLine("Microsoft has officially pulled support for Windows XP as of April 8th, 2014.")
    '            XPMessage.AppendLine("")
    '            XPMessage.AppendLine("What does that mean for you, the user of Restore Point Creator?  Nothing.  This program will continue to function as intended on Windows XP past April 8th, 2014.  However, because Microsoft has officially pulled support for Windows XP it means that you won't be getting any new Windows Updates and security patches for Windows XP.")
    '            XPMessage.AppendLine("")
    '            XPMessage.AppendLine("So despite the fact that this program will continue to function on Windows XP I (the developer of Restore Point Creator) still STRONGLY encourage you to upgrade to (at the very least) Windows 7.")
    '            XPMessage.AppendLine("")
    '            XPMessage.AppendLine("If you want to stop being notified about this, click ""Yes"" otherwise click ""No.""")

    '            Dim messageBoxResult As MsgBoxResult = MsgBox(XPMessage.ToString.Trim, MsgBoxStyle.Information + MsgBoxStyle.YesNo, Me.Text)
    '            XPMessage = Nothing

    '            If messageBoxResult = MsgBoxResult.Yes Then
    '                My.Settings.dontBugMeAboutXP2 = True
    '                My.Settings.Save()
    '            End If
    '        End If
    '    End If
    'End Sub

    Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        Try
            If GlobalVariables.boolLogLoadsAndExitsToEventLog = True Then Functions.writeToSystemEventLog("The user " & Environment.UserName & " started the program.", EventLogEntryType.Information)

            Try
                'AppActivate(Me.Text)
                Me.BringToFront()
                AppActivate(Process.GetCurrentProcess.Id)
            Catch ex As Exception
                ' Does nothing
            End Try

            Control.CheckForIllegalCrossThreadCalls = False

            If System.IO.File.Exists("updater.exe") = True Then
                Functions.searchForProcessAndKillIt("updater.exe")
                Functions.updateRestorePointCreatorUninstallationInfo()

                Try
                    System.IO.File.Delete("updater.exe")
                Catch ex As Exception
                    Functions.writeToSystemEventLog("Unable to delete updater.exe, an exception has occurred. Rebooting your computer and relaunching program should fix this issue.", EventLogEntryType.Error)
                    Functions.writeCrashToEventLog(ex)
                End Try
            End If

            If Environment.OSVersion.ToString.Contains("6.2") = False And Environment.OSVersion.ToString.Contains("6.3") = False And Functions.isThisWindows10() = False Then
                EnableThisIfTheUserInterfaceIsTooSmallOnSystemsRunningWindows8Or10ToolStripMenuItem.Visible = False
            Else
                Try
                    Dim registryKeyWeAreWorkingWith As RegistryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers", False)

                    If registryKeyWeAreWorkingWith.GetValue(Process.GetCurrentProcess.MainModule.FileName.ToLower, "no_exist") <> "no_exist" Then
                        EnableThisIfTheUserInterfaceIsTooSmallOnSystemsRunningWindows8Or10ToolStripMenuItem.Checked = True
                    End If

                    registryKeyWeAreWorkingWith.Close()
                    registryKeyWeAreWorkingWith.Dispose()
                Catch ex As Exception
                    ' Does nothing
                End Try
            End If

            Me.Icon = My.Resources.RestorePoint_noBackground_2
            toolStripHeader.Image = My.Resources.RestorePoint_noBackground_2.ToBitmap
            NotifyIcon1.Icon = My.Resources.RestorePoint_noBackground_2

            ' Checks to see if the user is running Windows 7, Windows 8, or Windows 8.1 and then proceeds to add the Jumplist Tasks.  Earlier
            ' versions of Windows don't support this option so there's a check for what OS the user is running before adding them.
            If Environment.OSVersion.ToString.Contains("10") Or Environment.OSVersion.ToString.Contains("6.4") Or Environment.OSVersion.ToString.Contains("6.3") Or Environment.OSVersion.ToString.Contains("6.2") Or Environment.OSVersion.ToString.Contains("6.1") Then
                createJumpListTaskItems()
            End If

            If Environment.OSVersion.ToString.Contains("10") Or Environment.OSVersion.ToString.Contains("6.4") Or Environment.OSVersion.ToString.Contains("6.3") Then
                BalloonToolStripMenuItem.Image = Nothing
            End If

            Functions.deleteRPLifeIntervalValue()

            If (Environment.OSVersion.ToString.Contains("6.2") Or Environment.OSVersion.ToString.Contains("6.3") Or Environment.OSVersion.ToString.Contains("6.4") Or Environment.OSVersion.ToString.Contains("10")) Then ' This checks to see if we are running Windows 8, 8.1, or 10.
                addSpecialRegistryKeysToWindows8ToFixWindows8SystemRestorePoint()
            End If

            checkForWindowsXPAndDisableAppropriateStuff()
            'startSystemRestorePointListLoadThread()

            Dim startSystemRestorePointListLoadThreadThread As New Threading.Thread(Sub()
                                                                                        Threading.Thread.Sleep(500)
                                                                                        startSystemRestorePointListLoadThread()
                                                                                    End Sub)
            startSystemRestorePointListLoadThreadThread.Name = "Start System Restore Point List Load Thread Thread"
            startSystemRestorePointListLoadThreadThread.Start()

            loadPreferences()
            checkForMyComputerRightClickOption()
            checkScheduledTaskEXEPaths()
            showDonationNotice()
            'loadIcons()

            If Functions.areWeInSafeMode() = True Then
                toolStripScheduleRestorePoints.Enabled = False
                btnRestoreToRestorePointSafeMode.Enabled = False
                stripRestoreSafeMode.Enabled = False
            End If

            If GlobalVariables.boolWinXP = False And My.Settings.checkSystemDrivesForFullShadowStorage = True Then
                Dim checkRestorePointSpaceThread As New Threading.Thread(AddressOf Functions.checkSystemDrivesForFullShadowStorage)
                checkRestorePointSpaceThread.Name = "Restore Point Storage Status Checking Thread"
                checkRestorePointSpaceThread.Priority = Threading.ThreadPriority.Lowest
                checkRestorePointSpaceThread.Start()
            End If

            If GlobalVariables.boolBeta Then
                Me.Text &= String.Format(" (Public Beta {0})", GlobalVariables.shortBetaVersion)
            ElseIf GlobalVariables.boolReleaseCandidate Then
                Me.Text &= String.Format(" (Release Candidate {0})", GlobalVariables.shortReleaseCandidateVersion)
            End If

            Functions.checkForAndEnableSystemRestoreIfNeeded()

            boolDoneLoading = True
            systemRestorePointsList.Select()
        Catch ex As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow("Main Form Load" & vbCrLf & vbCrLf & ex.Message, ex.StackTrace, ex.GetType)
        End Try
    End Sub

    'Sub loadIcons()
    '    Functions.loadIcon(btnRefreshRestorePoints, Functions.ResizeImage(My.Resources.refresh, 15, 15))
    '    Functions.loadIcon(btnDeleteRestorePoint, Functions.ResizeImage(My.Resources.removeSmall, 15, 15))
    '    Functions.loadIcon(btnRestoreToRestorePoint, Functions.ResizeImage(My.Resources.restore, 15, 15))

    '    'btnRefreshRestorePoints.Image = Functions.ResizeImage(My.Resources.refresh, 15, 15)
    '    'btnRefreshRestorePoints.ImageAlign = ContentAlignment.MiddleLeft
    '    'btnDeleteRestorePoint.Image = Functions.ResizeImage(My.Resources.removeSmall, 15, 15)
    '    'btnDeleteRestorePoint.ImageAlign = ContentAlignment.MiddleLeft
    '    'btnRestoreToRestorePoint.Image = Functions.ResizeImage(My.Resources.restore, 15, 15)
    '    'btnRestoreToRestorePoint.ImageAlign = ContentAlignment.MiddleLeft
    'End Sub

    Private Sub systemRestorePointsList_ColumnClick(sender As Object, e As System.Windows.Forms.ColumnClickEventArgs) Handles systemRestorePointsList.ColumnClick
        ' Get the new sorting column.
        Dim new_sorting_column As ColumnHeader = systemRestorePointsList.Columns(e.Column)

        ' Figure out the new sorting order.
        Dim sort_order As System.Windows.Forms.SortOrder
        If (m_SortingColumn Is Nothing) Then
            ' New column. Sort ascending.
            sort_order = SortOrder.Ascending
        Else
            ' See if this is the same column.
            If new_sorting_column.Equals(m_SortingColumn) Then
                ' Same column. Switch the sort order.
                If m_SortingColumn.Text.StartsWith("> ") Then
                    sort_order = SortOrder.Descending
                Else
                    sort_order = SortOrder.Ascending
                End If
            Else
                ' New column. Sort ascending.
                sort_order = SortOrder.Ascending
            End If

            ' Remove the old sort indicator.
            m_SortingColumn.Text = m_SortingColumn.Text.Substring(2)
        End If

        ' Display the new sort order.
        m_SortingColumn = new_sorting_column
        If sort_order = SortOrder.Ascending Then
            m_SortingColumn.Text = "> " & m_SortingColumn.Text
        Else
            m_SortingColumn.Text = "< " & m_SortingColumn.Text
        End If

        ' Create a comparer.
        systemRestorePointsList.ListViewItemSorter = New ListViewComparer(e.Column, sort_order)

        ' Sort.
        systemRestorePointsList.Sort()
    End Sub

    Private Sub systemRestorePointsList_ColumnWidthChanged(sender As Object, e As System.Windows.Forms.ColumnWidthChangedEventArgs) Handles systemRestorePointsList.ColumnWidthChanged
        If boolDoneLoading = True Then
            My.Settings.column1Size = ColumnHeader1.Width
            My.Settings.column2Size = ColumnHeader2.Width
            My.Settings.column3Size = ColumnHeader3.Width
            My.Settings.column4Size = ColumnHeader4.Width
            My.Settings.Save()
        End If
    End Sub

    'Private Sub systemRestorePointsList_ItemChecked(sender As Object, e As System.Windows.Forms.ItemCheckedEventArgs) Handles systemRestorePointsList.ItemChecked
    '    Dim checkedItems As ListView.CheckedListViewItemCollection = systemRestorePointsList.CheckedItems

    '    For Each item In checkedItems
    '        If My.Settings.savedRestorePointIDs.Contains(item.SubItems(0).Text) = False Then
    '            My.Settings.savedRestorePointIDs.Add(item.SubItems(0).Text)
    '            My.Settings.Save()
    '        End If
    '    Next
    'End Sub

    Private Sub ListView2_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles systemRestorePointsList.KeyUp
        If e.KeyCode = Keys.Delete And GlobalVariables.boolWinXP = False Then
            btnDeleteRestorePoint.PerformClick()
        End If
    End Sub
#End Region

#Region "--== Button Click Event Code ==--"
    'Private Sub btnDeleteOldRestorePoints_Click(sender As System.Object, e As System.EventArgs) Handles btnDeleteOldRestorePoints.Click
    '    If My.Settings.maxDaysManualDelete = -1 = False Then
    '        doDeleteOldSystemRestorePoint(My.Settings.maxDaysManualDelete)
    '    Else
    '        Dim frmDeleteOldSystemRestorePointsInstance = New frmDeleteOldSystemRestorePoints
    '        frmDeleteOldSystemRestorePointsInstance.StartPosition = FormStartPosition.CenterParent
    '        frmDeleteOldSystemRestorePointsInstance.ShowDialog()

    '        frmDeleteOldSystemRestorePointsInstance.Dispose()
    '        frmDeleteOldSystemRestorePointsInstance = Nothing

    '        'If frmDeleteOldSystemRestorePointsInstance Is Nothing Then
    '        '    frmDeleteOldSystemRestorePointsInstance = New frmDeleteOldSystemRestorePoints
    '        '    frmDeleteOldSystemRestorePointsInstance.Icon = Me.Icon
    '        '    frmDeleteOldSystemRestorePointsInstance.StartPosition = FormStartPosition.CenterParent
    '        '    'frmDeleteOldSystemRestorePointsInstance.Location = New Point(Me.Location.X + Me.Width / 2 - frmDeleteOldSystemRestorePointsInstance.Width / 2, Me.Location.Y + Me.Height / 2 - frmDeleteOldSystemRestorePointsInstance.Height / 2)
    '        '    frmDeleteOldSystemRestorePointsInstance.ShowDialog()
    '        'Else
    '        '    frmDeleteOldSystemRestorePointsInstance.BringToFront()
    '        'End If
    '    End If
    'End Sub

    Private Sub stripDelete_Click(sender As System.Object, e As System.EventArgs) Handles stripDelete.Click
        btnDeleteRestorePoint.PerformClick()
    End Sub

    Private Sub stripRefresh_Click(sender As System.Object, e As System.EventArgs) Handles stripRefresh.Click
        btnRefreshRestorePoints.PerformClick()
    End Sub

    Private Sub stripRestore_Click(sender As System.Object, e As System.EventArgs) Handles stripRestore.Click
        btnRestoreToRestorePoint.PerformClick()
    End Sub

    Private Sub btnCreate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCreate.Click
        If Functions.areWeInSafeMode() = True Then
            MsgBox("You are in Safe Mode, it's not recommended to make restore points in Safe Mode.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        End If

        If Regex.IsMatch(txtRestorePointDescription.Text, "Type in a name for your custom-named System Restore Point\.\.\.", RegexOptions.IgnoreCase) Then
            Exit Sub
        End If

        Functions.openPleaseWaitWindow("Creating Restore Point... Please Wait.")

        Dim createSystemRestorePointThread As New Threading.Thread(Sub() unifiedCreateSystemRestorePoint(txtRestorePointDescription.Text))
        createSystemRestorePointThread.Name = "Create System Restore Point Thread"
        createSystemRestorePointThread.Priority = Threading.ThreadPriority.Normal
        createSystemRestorePointThread.Start()
        createSystemRestorePointThread = Nothing
    End Sub

    Private Sub btnCreateSystemCheckpoint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCreateSystemCheckpoint.Click
        If Functions.areWeInSafeMode() = True Then
            MsgBox("You are in Safe Mode, it's not recommended to make restore points in Safe Mode.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        End If

        Functions.openPleaseWaitWindow("Creating Restore Point... Please Wait.")

        Dim threadCreateSystemCheckpoint As New Threading.Thread(Sub() unifiedCreateSystemRestorePoint())
        threadCreateSystemCheckpoint.Name = "Create System Checkpoint Thread"
        threadCreateSystemCheckpoint.Priority = Threading.ThreadPriority.Normal
        threadCreateSystemCheckpoint.Start()
        threadCreateSystemCheckpoint = Nothing
    End Sub

    Private Sub btnRestoreToRestorePoint_Click(sender As System.Object, e As System.EventArgs) Handles btnRestoreToRestorePoint.Click
        If systemRestorePointsList.SelectedItems.Count > 1 Then
            MsgBox("You can't have multiple System Restore Points selected for this function to work, you must only select one.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        ElseIf systemRestorePointsList.SelectedItems.Count = 0 Then
            MsgBox("You must select a System Restore Point to restore your system to.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        End If

        Dim selectedRestorePoint As ListViewItem = systemRestorePointsList.SelectedItems(0)

        Dim strDescription As String = selectedRestorePoint.SubItems(1).Text
        Dim strDate As String = selectedRestorePoint.SubItems(2).Text
        Dim strType As String = selectedRestorePoint.SubItems(3).Text

        Dim msgboxResult As MsgBoxResult = MsgBox(String.Format("Are you sure you want to restore your system back to the selected System Restore Point?  Your system will reboot after the restoration process is complete.{0}{0}Description: {1}{0}Created On: {2}{0}Type: {3}", vbCrLf, strDescription, strDate, strType), MsgBoxStyle.YesNo + MsgBoxStyle.Question, "Are you sure?")

        If msgboxResult = Microsoft.VisualBasic.MsgBoxResult.Yes Then
            Functions.openPleaseWaitWindow("Beginning the Restore Process... Please wait.")

            Dim thread As New Threading.Thread(AddressOf restoreSystemRestorePoint)
            thread.Name = "Restore System Restore Point Thread"
            thread.Priority = Threading.ThreadPriority.Normal
            thread.Start()
        Else
            MsgBox("Your system has NOT been restored to the selected System Restore Point.", MsgBoxStyle.Information, Me.Text)
        End If
    End Sub

    'Private Sub btnAbout_Click(sender As System.Object, e As System.EventArgs) Handles btnAbout.Click
    '    Dim version() As String = Application.ProductVersion.Split(".".ToCharArray) ' Gets the program version
    '    MsgBox(Me.Text & vbCrLf & "Written By Tom Parkison" & vbCrLf & vbCrLf & String.Format("Version {0}.{1} Build {2}", version(0), version(1), version(2)) & vbCrLf & vbCrLf & "All operations that have to do with Microsoft Windows System Restore are processed by approved Microsoft APIs, System DLLs, and Microsoft Windows Management Instrumentation APIs." & vbCrLf & vbCrLf & "Source code is available upon request.", MsgBoxStyle.Information, "About")
    '    version = Nothing
    'End Sub

    Private Sub btnClose_Click(sender As System.Object, e As System.EventArgs)
        Me.Close()
    End Sub

    'Private Sub btnUpdate_Click(sender As System.Object, e As System.EventArgs) Handles btnUpdate.Click
    '    Dim userInitiatedCheckForUpdatesThread As New Threading.Thread(AddressOf userInitiatedCheckForUpdates)
    '    userInitiatedCheckForUpdatesThread.Name = "User Initiated Check For Updates Thread"
    '    userInitiatedCheckForUpdatesThread.Priority = Threading.ThreadPriority.Lowest
    '    userInitiatedCheckForUpdatesThread.Start()
    '    btnUpdate.Enabled = False
    'End Sub

    Sub userInitiatedCheckForUpdates()
        My.Settings.ProgramExecutionsSinceLastUpdateCheck = 0
        My.Settings.Save()

        If Functions.checkForInternetConnection() = False Then
            toolStripCheckForUpdates.Enabled = True
            MsgBox("No Internet connection detected.", MsgBoxStyle.Information, Me.Text)
        Else
            Try
                Dim version() As String = Application.ProductVersion.Split(".".ToCharArray) ' Gets the program version

                Dim majorVersion As Short = Short.Parse(version(0))
                Dim minorVersion As Short = Short.Parse(version(1))
                Dim buildVersion As Short = Short.Parse(version(2))

                Dim strRemoteBuild As String
                Dim shortRemoteBuild As Short

                If My.Settings.updateChannel = GlobalVariables.updateChannelBeta Then
                    strRemoteBuild = Functions.getWebPageData(String.Format("{0}{1}.{2}", GlobalVariables.programUpdateCheckerURLBeta, version(0), version(1)))
                ElseIf My.Settings.updateChannel = GlobalVariables.updateChannelStable Then
                    strRemoteBuild = Functions.getWebPageData(String.Format("{0}{1}.{2}", GlobalVariables.programUpdateCheckerURL, version(0), version(1)))
                End If

                If strRemoteBuild = Functions.ERROR_WEBREQUEST Then
                    MsgBox("There was an error checking for a software update; update check aborted.", MsgBoxStyle.Information, Me.Text)
                    Exit Sub
                End If

                Dim changeLog As String
                If strRemoteBuild.Contains("beta") = False Then
                    'changeLog = Functions.getWebPageData("http://www.toms-world.org/readFirstEntryFromRestorePointCreatorChangeLog.php?nohtml=true")
                    changeLog = Functions.getWebPageData("http://www.toms-world.org/recentRPCChange.txt")
                End If

                'debug.writeline("strRemoteBuild = " & strRemoteBuild)

                ' This handles entirely new versions, not just new builds.
                If strRemoteBuild.Contains("newversion") = True Then
                    ' Example: newversion-1.2
                    Dim strRemoteBuildParts As String() = strRemoteBuild.Split("-")
                    'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                    MsgBox(String.Format("{3} version {0}.{1} is no longer supported and has been replaced by version {2}." & vbCrLf & vbCrLf & changeLog, majorVersion, minorVersion, strRemoteBuildParts(1), GlobalVariables.programName), MsgBoxStyle.Information, Me.Text)
                    launchUpdaterApp()
                    Exit Sub
                ElseIf strRemoteBuild.Contains("beta") = True Then
                    Dim strRemoteBuildParts As String() = strRemoteBuild.Split("-")

                    If strRemoteBuildParts(1) > buildVersion Then
                        'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {0}.{1} Build {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                        MsgBox(String.Format("There is an updated version of {0}. The update will now download.", GlobalVariables.programName), MsgBoxStyle.Information, Me.Text & " Version Checker")
                        launchUpdaterApp()
                        Exit Sub
                    ElseIf strRemoteBuildParts(1) = buildVersion Then
                        'Functions.writeToSystemEventLog("Program update check complete. You already have the latest version.", EventLogEntryType.Information)

                        If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
                            MsgBox("You already have the latest version.", MsgBoxStyle.Information, Me.Text)
                        Else
                            NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "You already have the latest version.", ToolTipIcon.Info)
                        End If
                    End If
                ElseIf strRemoteBuild.Contains("minor") = True Then
                    Dim strRemoteBuildParts As String() = strRemoteBuild.Split("-")
                    'debug.writeline(strRemoteBuildParts.ToString)

                    Dim minorBuildApplicables As New Specialized.StringCollection

                    If strRemoteBuildParts(2).Contains(",") Then
                        minorBuildApplicables.AddRange(strRemoteBuildParts(2).ToString.Trim.Split(","))
                    Else
                        minorBuildApplicables.Add(strRemoteBuildParts(2).ToString.Trim)
                    End If

                    'debug.writeline("minorBuildApplicables = " & minorBuildApplicables.ToString)

                    If strRemoteBuildParts(1) > buildVersion And minorBuildApplicables.Contains(buildVersion.ToString) = True Then
                        Dim updateQuestion As MsgBoxResult = MsgBox("There is an update available but it's classified as a minor update.  It's not a required update so if you do not want to update the program at this time, it is OK to keep using the version you have." & vbCrLf & vbCrLf & changeLog & vbCrLf & vbCrLf & "Do you want to download the update?", MsgBoxStyle.Information + MsgBoxStyle.YesNo, Me.Text)
                        If updateQuestion = MsgBoxResult.Yes Then
                            'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {0}.{1} Build {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                            launchUpdaterApp()
                            Exit Sub
                        End If
                    ElseIf strRemoteBuildParts(1) > buildVersion And minorBuildApplicables.Contains(buildVersion.ToString) = False Then
                        'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {0}.{1} Build {3}.", majorVersion, minorVersion, buildVersion, strRemoteBuildParts(1)), EventLogEntryType.Information)
                        launchUpdaterApp()
                        Exit Sub
                    ElseIf Short.Parse(strRemoteBuildParts(1)) = buildVersion Then
                        'debug.writeline(strRemoteBuildParts(1))
                        'Functions.writeToSystemEventLog("Program update check complete. You already have the latest version.", EventLogEntryType.Information)

                        If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
                            MsgBox("You already have the latest version.", MsgBoxStyle.Information, Me.Text)
                        Else
                            NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "You already have the latest version.", ToolTipIcon.Info)
                        End If
                    End If

                    minorBuildApplicables.Clear()
                    minorBuildApplicables = Nothing
                ElseIf Short.TryParse(strRemoteBuild, shortRemoteBuild) = True Then
                    If shortRemoteBuild < buildVersion Then
                        If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
                            MsgBox("Somehow you have a version that is newer than is listed on the product web site, wierd.", MsgBoxStyle.Information, Me.Text)
                        Else
                            NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "Somehow you have a version that is newer than is listed on the product web site, wierd.", ToolTipIcon.Info)
                        End If
                    ElseIf shortRemoteBuild = buildVersion Then
                        'Functions.writeToSystemEventLog("Program update check complete. You already have the latest version.", EventLogEntryType.Information)

                        If My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox Then
                            MsgBox("You already have the latest version.", MsgBoxStyle.Information, Me.Text)
                        Else
                            NotifyIcon1.ShowBalloonTip(5000, "Restore Point Creator", "You already have the latest version.", ToolTipIcon.Info)
                        End If
                    ElseIf shortRemoteBuild > buildVersion Then
                        'Functions.writeToSystemEventLog(String.Format("Updating from version {0}.{1} Build {2} to {0}.{1} Build {3}.", majorVersion, minorVersion, buildVersion, shortRemoteBuild), EventLogEntryType.Information)
                        MsgBox(String.Format("There is an updated version of {0}. The update will now download." & vbCrLf & vbCrLf & changeLog, GlobalVariables.programName), MsgBoxStyle.Information, Me.Text & " Version Checker")
                        launchUpdaterApp()
                    End If
                End If
            Catch ex As Exception
                ' Ok, we crashed but who cares.  We give an error message.
                'MsgBox("Error while checking for new version.", MsgBoxStyle.Information, Me.Text)
            Finally
                toolStripCheckForUpdates.Enabled = True
            End Try
        End If
    End Sub

    'Private Sub btnOptimizeRuntime_Click(sender As System.Object, e As System.EventArgs) Handles btnOptimizeRuntime.Click
    '    MsgBox(Application.ExecutablePath)
    '    Exit Sub

    '    Try
    '        ' Prepare to start the program with Administrative privilages using a special invocation that will trigger a UAC prompt.
    '        Dim psi As New ProcessStartInfo
    '        psi.Verb = "runas"
    '        psi.UseShellExecute = True
    '        psi.FileName = IO.Path.Combine(Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory(), "ngen.exe")
    '        psi.Arguments = """" & Application.ExecutablePath & """"
    '        psi.WindowStyle = ProcessWindowStyle.Minimized

    '        Dim proc As Process = Process.Start(psi)

    '        proc.WaitForExit()

    '        Dim versionParts As String() = Application.ProductVersion.Split(".")
    '        Dim currentBuild As Integer = versionParts(2)
    '        My.Settings.BuildOfLastRunTimeOptimization = currentBuild
    '        versionParts = Nothing : currentBuild = Nothing

    '        btnOptimizeRuntime.Visible = False
    '    Catch ex As System.ComponentModel.Win32Exception
    '        MsgBox("There was an error while launching the elevated process.", MsgBoxStyle.Critical, Me.Text)
    '    End Try
    'End Sub

    Private Sub btnRefreshRestorePoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnRefreshRestorePoints.Click
        If btnRefreshRestorePoints.Text = "Refresh List of System Restore Points" Then
            Functions.openPleaseWaitWindow("Loading Restore Points... Please Wait.")

            updateRestorePointListThread = New Threading.Thread(AddressOf updateSystemRestorePointsList)
            updateRestorePointListThread.Name = "System Restore Point List Updating Thread"
            updateRestorePointListThread.Priority = Threading.ThreadPriority.Normal
            updateRestorePointListThread.Start()
        Else
            If (updateRestorePointListThread Is Nothing) = False Then
                updateRestorePointListThread.Abort()
                btnRefreshRestorePoints.Text = "Refresh List of System Restore Points"
            End If
        End If
    End Sub

    Private Sub btnDeleteRestorePoint_Click(sender As System.Object, e As System.EventArgs) Handles btnDeleteRestorePoint.Click
        If GlobalVariables.boolWinXP = False Then
            If systemRestorePointsList.SelectedItems.Count = 0 Then
                MsgBox("You must select one or more System Restore Points to delete.", MsgBoxStyle.Information, Me.Text)
                Exit Sub
            End If

            Functions.openPleaseWaitWindow("Deleting Restore Points... Please Wait.")

            deleteProgressBar.Visible = True

            deleteThread = New Threading.Thread(AddressOf deleteSystemRestorePoint)
            deleteThread.Name = "System Restore Point Deletion Thread"
            deleteThread.Priority = Threading.ThreadPriority.Normal
            deleteThread.Start()
        End If
    End Sub
#End Region

#Region "--== Commented Out Code ==--"
    'Private Sub chkConfirmDeletions_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkConfirmDeletions.CheckedChanged
    '    If boolDoneLoading = True Then
    '        If chkConfirmDeletions.Checked = True Then
    '            My.Settings.confirmRestorePointDeletions = True
    '        Else
    '            My.Settings.confirmRestorePointDeletions = False
    '        End If
    '        My.Settings.Save()
    '    End If
    'End Sub

    'Private Sub chkCheckForUpdates_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCheckForUpdates.CheckedChanged
    '    If boolDoneLoading = True Then
    '        If chkCheckForUpdates.Checked = True Then
    '            My.Settings.CheckForUpdates = True
    '        Else
    '            My.Settings.CheckForUpdates = False
    '        End If
    '        My.Settings.Save()
    '    End If
    'End Sub

    'Private Sub chkCloseAfterCreating_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCloseAfterCreating.CheckedChanged
    '    If boolDoneLoading = True Then
    '        If chkCloseAfterCreating.Checked = True Then
    '            My.Settings.closeAfterCreatingRestorePoint = True
    '            'debug.writeline("My.Settings.closeAfterCreatingRestorePoint = True")
    '        Else
    '            My.Settings.closeAfterCreatingRestorePoint = False
    '            'debug.writeline("My.Settings.closeAfterCreatingRestorePoint = False")
    '        End If
    '        My.Settings.Save()
    '    End If
    'End Sub
#End Region

    'Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
    '    Dim searcher As New ManagementObjectSearcher("Root\DEFAULT", "SELECT * FROM SystemRestoreConfig")

    '    For Each queryObj As ManagementObject In searcher.Get()
    '        'debug.writeline("DiskPercent : {0}", queryObj("DiskPercent"))
    '        'debug.writeline("MyKey : {0}", queryObj("MyKey"))
    '        'debug.writeline("RPSessionInterval : {0}", queryObj("RPSessionInterval"))
    '    Next
    'End Sub

    Private Sub toolStripViewDiskSpaceUsage_Click(sender As System.Object, e As System.EventArgs) Handles toolStripViewDiskSpaceUsage.Click
        If (windowInstances.frmDiskSpaceUsageWindow Is Nothing) Then
            windowInstances.frmDiskSpaceUsageWindow = New Disk_Space_Usage
            windowInstances.frmDiskSpaceUsageWindow.StartPosition = FormStartPosition.CenterParent
            windowInstances.frmDiskSpaceUsageWindow.Icon = Me.Icon
            windowInstances.frmDiskSpaceUsageWindow.Show()
        Else
            windowInstances.frmDiskSpaceUsageWindow.BringToFront()
        End If
    End Sub

    Private Sub toolStripManageSystemRestoreStorageSize_Click(sender As System.Object, e As System.EventArgs) Handles toolStripManageSystemRestoreStorageSize.Click
        If (windowInstances.frmManageSystemRestoreStorageSpace Is Nothing) Then
            windowInstances.frmManageSystemRestoreStorageSpace = New frmManageSystemRestoreStorageSpace
            windowInstances.frmManageSystemRestoreStorageSpace.StartPosition = FormStartPosition.CenterParent
            windowInstances.frmManageSystemRestoreStorageSpace.Icon = Me.Icon
            windowInstances.frmManageSystemRestoreStorageSpace.Show()
        Else
            windowInstances.frmManageSystemRestoreStorageSpace.BringToFront()
        End If
    End Sub

    Private Sub toolStripScheduleRestorePoints_Click(sender As System.Object, e As System.EventArgs) Handles toolStripScheduleRestorePoints.Click
        If (windowInstances.frmTaskScheduler Is Nothing) Then
            windowInstances.frmTaskScheduler = New frmTaskScheduler
            windowInstances.frmTaskScheduler.StartPosition = FormStartPosition.CenterParent
            windowInstances.frmTaskScheduler.Icon = Me.Icon
            windowInstances.frmTaskScheduler.Show()
        Else
            windowInstances.frmTaskScheduler.BringToFront()
        End If
    End Sub

    Private Sub toolStripMyComputer_Click(sender As System.Object, e As System.EventArgs) Handles toolStripMyComputer.Click
        If Functions.isThisWindows10() = True Then
            Exit Sub
        End If

        If toolStripMyComputer.Checked Then
            Try
                ' Attempts to fix something that should never have been broken to begin with.  Why this would be broken, who the fuck knows.
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}", False) Is Nothing) Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID", True).CreateSubKey("{20D04FE0-3AEA-1069-A2D8-08002B30309D}")
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}", True).CreateSubKey("Shell")
                    'debug.writeline("ClassesRoot\CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D} doesn't exist.  Very weird!")
                End If
            Catch ex As Exception
                ' Does nothing
            End Try

            If Application.ExecutablePath.ToLower.Contains("program files") = False Then
                If Environment.Is64BitOperatingSystem Then
                    MsgBox("It is HIGHLY recommended to place this program's executable in C:\Program Files (x86)." & vbCrLf & vbCrLf & "The reason why is that this portion of the program creates a My Computer right-click option so if Windows can't find the executable in the specified path, the right-click option will be invalid.", MsgBoxStyle.Information, Me.Text)
                Else
                    MsgBox("It is HIGHLY recommended to place this program's executable in C:\Program Files." & vbCrLf & vbCrLf & "The reason why is that this portion of the program creates a My Computer right-click option so if Windows can't find the executable in the specified path, the right-click option will be invalid.", MsgBoxStyle.Information, Me.Text)
                End If

                toolStripMyComputer.Checked = False
                Exit Sub
            End If

            Dim boolIsThisVistaOrNewer As Boolean = False
            If Environment.OSVersion.Version.Major >= 6 Then
                boolIsThisVistaOrNewer = True
            End If

            Try
                Dim registryKey As RegistryKey

                ' =======================================================
                ' == Makes the "Create System Restore Checkpoint" Item ==
                ' =======================================================

                ' Checks if an existing entry exists and deletes it.
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint") Is Nothing) = False Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Create System Restore Checkpoint")
                End If

                Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).CreateSubKey("Create System Restore Checkpoint")
                Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint", True).CreateSubKey("Command")

                registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint", True)
                If boolIsThisVistaOrNewer = True Then
                    registryKey.SetValue("HasLUAShield", "", RegistryValueKind.String)
                End If
                registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                registryKey.SetValue("SuppressionPolicy", 1073741884, RegistryValueKind.DWord)
                registryKey.Close()
                registryKey.Dispose()

                registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint\Command", True)
                registryKey.SetValue(vbNullString, String.Format("{0}{1}{0} -createrestorepoint", Chr(34), Application.ExecutablePath))
                registryKey.Close()
                registryKey.Dispose()

                ' ===============================================================
                ' == Makes the "Create Custom Named System Restore Point" Item ==
                ' ===============================================================

                ' Checks if an existing entry exists and deletes it.
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point") Is Nothing) = False Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Create Custom Named System Restore Point")
                End If

                Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).CreateSubKey("Create Custom Named System Restore Point")
                Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point", True).CreateSubKey("Command")

                registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point", True)
                If boolIsThisVistaOrNewer = True Then
                    registryKey.SetValue("HasLUAShield", "", RegistryValueKind.String)
                End If
                registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                registryKey.SetValue("SuppressionPolicy", 1073741884, RegistryValueKind.DWord)
                registryKey.Close()
                registryKey.Dispose()

                registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point\Command", True)
                registryKey.SetValue(vbNullString, String.Format("{0}{1}{0} -createrestorepointcustomname", Chr(34), Application.ExecutablePath))
                registryKey.Close()
                registryKey.Dispose()

                ' ===================================================
                ' == Makes the "Launch Restore Point Creator" Item ==
                ' ===================================================

                ' Checks if an existing entry exists and deletes it.
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator") Is Nothing) = False Then
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Launch Restore Point Creator")
                End If

                Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).CreateSubKey("Launch Restore Point Creator")
                Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", True).CreateSubKey("Command")

                registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", True)
                If boolIsThisVistaOrNewer = True Then
                    registryKey.SetValue("HasLUAShield", "", RegistryValueKind.String)
                End If
                registryKey.SetValue("icon", String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                registryKey.SetValue("SuppressionPolicy", 1073741884, RegistryValueKind.DWord)
                registryKey.Close()
                registryKey.Dispose()

                registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator\Command", True)
                registryKey.SetValue(vbNullString, String.Format("{0}{1}{0}", Chr(34), Application.ExecutablePath))
                registryKey.Close()
                registryKey.Dispose()
            Catch ex As System.Security.SecurityException
                toolStripMyComputer.Checked = False
                Functions.writeCrashToEventLog(ex)
                MsgBox("Unable to modify the My Computer right-click context menu. A security violation has occurred. Please contact your system administrator for assistance.", MsgBoxStyle.Critical, Me.Text)
            End Try
        Else
            Try
                ' This code removes the options from the "My Computer" right-click context menu.

                ' All of this prevents a rare Null Reference Exception.
                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint", False) Is Nothing) = False Then
                    'Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create System Restore Checkpoint", True).DeleteSubKey("Command")
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Create System Restore Checkpoint")
                End If

                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore", False) Is Nothing) = False Then
                    'Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore", True).DeleteSubKey("Command")
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Create Custom Named System Restore")
                End If

                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point", False) Is Nothing) = False Then
                    'Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Create Custom Named System Restore Point", True).DeleteSubKey("Command")
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Create Custom Named System Restore Point")
                End If

                If (Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", False) Is Nothing) = False Then
                    'Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell\Launch Restore Point Creator", True).DeleteSubKey("Command")
                    Microsoft.Win32.Registry.ClassesRoot.OpenSubKey("CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}\Shell", True).DeleteSubKeyTree("Launch Restore Point Creator")
                End If
                ' All of this prevents a rare Null Reference Exception.
            Catch ex As System.Security.SecurityException
                Functions.writeCrashToEventLog(ex)
                MsgBox("Unable to modify the My Computer right-click context menu. A security violation has occurred. Please contact your system administrator for assistance.", MsgBoxStyle.Critical, Me.Text)
            End Try
        End If
    End Sub

    Private Sub toolStripLogRestorePointDeletions_Click(sender As System.Object, e As System.EventArgs) Handles toolStripLogRestorePointDeletions.Click
        Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Log Restore Point Deletions", toolStripLogRestorePointDeletions.Checked.ToString, RegistryValueKind.String)
    End Sub

    Private Sub toolStripCheckForUpdates_Click(sender As System.Object, e As System.EventArgs) Handles toolStripCheckForUpdates.Click
        Dim userInitiatedCheckForUpdatesThread As New Threading.Thread(AddressOf userInitiatedCheckForUpdates)
        userInitiatedCheckForUpdatesThread.Name = "User Initiated Check For Updates Thread"
        userInitiatedCheckForUpdatesThread.Priority = Threading.ThreadPriority.Lowest
        userInitiatedCheckForUpdatesThread.Start()
        toolStripCheckForUpdates.Enabled = False
    End Sub

    Sub deleteAllRestorePointsThread()
        ' Declares some variables.
        Dim systemRestorePoints As ManagementObjectSearcher
        'Dim systemRestorePointClass As New SystemRestorePointCreator.Classes.SystemRestore
        Dim numberOfOldRestorePointsDeleted As Short = 0
        Dim dateTime As DateTime

        Try
            If toolStripLogRestorePointDeletions.Checked Then
                Functions.writeToSystemEventLog(String.Format("Began deleting all System Restore Points by {0}\{1}.", Environment.MachineName, Environment.UserName), EventLogEntryType.Information)
            End If

            btnCreate.Enabled = False
            btnCreateSystemCheckpoint.Enabled = False
            txtRestorePointDescription.Enabled = False

            btnRefreshRestorePoints.Enabled = False
            systemRestorePointsList.Enabled = False
            systemRestorePointsList.Items.Clear() ' Clears the System Restore Points list on the GUI of existing items.

            ' Get all System Restore Points from the Windows Management System and puts then in the systemRestorePoints variable.
            systemRestorePoints = New ManagementObjectSearcher("root\DEFAULT", "SELECT * FROM SystemRestore")
            Dim oldNumberOfRestorePoints As Integer = systemRestorePoints.Get().Count

            If AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked Then
                newestSystemRestoreID = 0
            End If

            ' Checks to see if there are any System Restore Points to be listed.
            If (systemRestorePoints.Get().Count = 0) = False Then
                ' Loops through systemRestorePoints.
                For Each systemRestorePoint As ManagementObject In systemRestorePoints.Get()
                    If newestSystemRestoreID <> Integer.Parse(systemRestorePoint("SequenceNumber").ToString) Then
                        'debug.writeline("Deleting Restore Point ID " & systemRestorePoint("SequenceNumber").ToString)
                        Threading.Thread.Sleep(500)

                        If toolStripLogRestorePointDeletions.Checked Then
                            numberOfOldRestorePointsDeleted += 1
                            'regexMatches = GlobalVariables.regexRestorePointCreationTimeParser.Match(systemRestorePoint("CreationTime").ToString)

                            If systemRestorePoint("CreationTime").ToString.Trim <> "" Then
                                '' Gets the values out of the Regular Expression Matches object.
                                'With regexMatches
                                '    year = Integer.Parse(.Groups("year").Value)
                                '    month = Integer.Parse(.Groups("month").Value)
                                '    day = Integer.Parse(.Groups("day").Value)
                                '    second = Integer.Parse(.Groups("second").Value)
                                '    minute = Integer.Parse(.Groups("minute").Value)
                                '    hour = Integer.Parse(.Groups("hour").Value)
                                'End With

                                dateTime = Functions.parseSystemRestorePointCreationDate(systemRestorePoint("CreationTime"))

                                If toolStripLogRestorePointDeletions.Checked Then
                                    Functions.writeToSystemEventLog(String.Format("Deleted Restore Point named ""{0}"" which was created on {1} at {2}.", systemRestorePoint("Description").ToString, dateTime.ToShortDateString, dateTime.ToLongTimeString), EventLogEntryType.Information)
                                End If

                                dateTime = Nothing
                            End If
                        End If

                        Functions.SRRemoveRestorePoint(Integer.Parse(systemRestorePoint("SequenceNumber").ToString))
                    End If
                    ' systemRestorePoint(GlobalVariables.systemRestorePointDataType.SequenceNumber.ToString).ToString

                    systemRestorePoint.Dispose()
                    systemRestorePoint = Nothing
                Next

                While oldNumberOfRestorePoints = systemRestorePoints.Get().Count
                    Threading.Thread.Sleep(500)
                    ' Does nothing, just loops.
                End While

                Functions.closePleaseWaitWindow()

                systemRestorePoints.Dispose()
                systemRestorePoints = Nothing
            Else
                newestSystemRestoreID = 0
            End If
        Catch ex As Threading.ThreadAbortException
            ' Does nothing
        Catch ex2 As Exception
            Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
            exceptionHandler.manuallyLoadCrashWindow(ex2.Message, ex2.StackTrace, ex2.GetType)
        Finally
            If toolStripLogRestorePointDeletions.Checked Then
                If numberOfOldRestorePointsDeleted = 0 Then
                    Functions.writeToSystemEventLog("End of processing old System Restore Points. No old System Restore Point were deleted.", EventLogEntryType.Information)
                ElseIf numberOfOldRestorePointsDeleted = 1 Then
                    Functions.writeToSystemEventLog("End of processing old System Restore Points. 1 old System Restore Point was deleted.", EventLogEntryType.Information)
                Else
                    Functions.writeToSystemEventLog(String.Format("End of processing old System Restore Points. {0} old System Restore Points were deleted.", numberOfOldRestorePointsDeleted), EventLogEntryType.Information)
                End If
            End If

            If Functions.areWeInSafeMode() = False Then
                btnCreateSystemCheckpoint.Enabled = True
                btnCreate.Enabled = True
                txtRestorePointDescription.Enabled = True
            End If

            If (systemRestorePoints Is Nothing) = False Then
                systemRestorePoints.Dispose()
                systemRestorePoints = Nothing
            End If

            updateSystemRestorePointsList()
            systemRestorePointsList.Enabled = True
            toolStripDeleteAllRestorePoints.Enabled = True
            enableFormElements()

            ' Cleans up some memory.
            'systemRestoreIDs = Nothing
            'systemRestorePointClass = Nothing
        End Try
    End Sub

    Dim deleteAllRestorePointsThreadInstance As Threading.Thread

    Private Sub ProductWebSiteToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ProductWebSiteToolStripMenuItem.Click
        Functions.launchURLInWebBrowser(GlobalVariables.webSiteURL, "An error occurred when trying to launch the product's web site URL in your default browser. The URL has been copied to your Windows Clipboard for you to paste into the address bar in the browser of your choice.")
    End Sub

    Private Sub AboutThisProgramToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AboutThisProgramToolStripMenuItem.Click
        Dim version() As String = Application.ProductVersion.Split(".".ToCharArray) ' Gets the program version
        Dim stringBuilder As New StringBuilder

        stringBuilder.AppendLine(Me.Text)
        stringBuilder.AppendLine("Written By Tom Parkison")
        stringBuilder.AppendLine("Copyright Thomas Parkison 2012-2017.")
        stringBuilder.AppendLine()

        If GlobalVariables.boolBeta Then
            stringBuilder.AppendFormat("Version {0}.{1} Build {2} Public Beta {3}", version(0), version(1), version(2), GlobalVariables.shortBetaVersion)
        ElseIf GlobalVariables.boolReleaseCandidate Then
            stringBuilder.AppendFormat("Version {0}.{1} Build {2} Release Candidate {3}", version(0), version(1), version(2), GlobalVariables.shortReleaseCandidateVersion)
        Else
            stringBuilder.AppendFormat("Version {0}.{1} Build {2}", version(0), version(1), version(2))
        End If

        If GlobalVariables.boolDebugBuild = True Then
            stringBuilder.Append(" (Debug Build)")
            stringBuilder.AppendLine()
        Else
            stringBuilder.AppendLine()
        End If

        stringBuilder.AppendLine()
        stringBuilder.AppendLine("All operations that have to do with Microsoft Windows System Restore are processed by approved Microsoft APIs, System DLLs, and Microsoft Windows Management Instrumentation APIs.")
        stringBuilder.AppendLine()
        stringBuilder.AppendLine("Windows and Windows System Restore are registered trademarks of Microsoft Corporation in the United States and other countries.")
        'stringBuilder.AppendLine()
        'stringBuilder.AppendLine("The icons and images that are used in this program are property of FindIcons.com and are used with permission of FindIcons.com.")

        MsgBox(stringBuilder.ToString.Trim, MsgBoxStyle.Information, "About")

        version = Nothing
        stringBuilder = Nothing
    End Sub

    Private Sub toolStripDonate_Click(sender As Object, e As EventArgs) Handles toolStripDonate.Click
        doTheGrayingOfTheRestorePointNameTextBox()
        Dim registryShowDonationMessageValue As String = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey).GetValue("Show Donation Message", "True").ToString.Trim
        Dim boolRegistryShowDonationMessageValue As Boolean

        If registryShowDonationMessageValue.ToLower = "true" Or registryShowDonationMessageValue.ToLower = "false" Then
            boolRegistryShowDonationMessageValue = Boolean.Parse(registryShowDonationMessageValue)
        Else
            boolRegistryShowDonationMessageValue = True
        End If

        If boolRegistryShowDonationMessageValue = False Then
            MsgBox("It appears that you have already donated to the developer of this program.  You don't have to donate again but if you want to, I won't argue with you.", MsgBoxStyle.Information, Me.Text)
        End If

        launchDonationURL()
    End Sub

    Private Sub toolStripCloseAfterRestorePointIsCreated_Click(sender As Object, e As EventArgs) Handles toolStripCloseAfterRestorePointIsCreated.Click
        If toolStripCloseAfterRestorePointIsCreated.Checked = True Then
            My.Settings.closeAfterCreatingRestorePoint = True
            'debug.writeline("My.Settings.closeAfterCreatingRestorePoint = True")
        Else
            My.Settings.closeAfterCreatingRestorePoint = False
            'debug.writeline("My.Settings.closeAfterCreatingRestorePoint = False")
        End If
        My.Settings.Save()
    End Sub

    Public Sub New()

        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.

    End Sub

    Private Sub OldToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles toolStripDeleteOldRestorePoints.Click
        If My.Settings.maxDaysManualDelete = -1 = False Then
            doDeleteOldSystemRestorePoint(My.Settings.maxDaysManualDelete)
        Else
            Dim frmDeleteOldSystemRestorePointsInstance = New frmDeleteOldSystemRestorePoints
            frmDeleteOldSystemRestorePointsInstance.StartPosition = FormStartPosition.CenterParent
            frmDeleteOldSystemRestorePointsInstance.ShowDialog()

            frmDeleteOldSystemRestorePointsInstance.Dispose()
            frmDeleteOldSystemRestorePointsInstance = Nothing

            'If frmDeleteOldSystemRestorePointsInstance Is Nothing Then
            '    frmDeleteOldSystemRestorePointsInstance = New frmDeleteOldSystemRestorePoints
            '    frmDeleteOldSystemRestorePointsInstance.Icon = Me.Icon
            '    frmDeleteOldSystemRestorePointsInstance.StartPosition = FormStartPosition.CenterParent
            '    'frmDeleteOldSystemRestorePointsInstance.Location = New Point(Me.Location.X + Me.Width / 2 - frmDeleteOldSystemRestorePointsInstance.Width / 2, Me.Location.Y + Me.Height / 2 - frmDeleteOldSystemRestorePointsInstance.Height / 2)
            '    frmDeleteOldSystemRestorePointsInstance.ShowDialog()
            'Else
            '    frmDeleteOldSystemRestorePointsInstance.BringToFront()
            'End If
        End If
    End Sub

    Private Sub AllToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles toolStripDeleteAllRestorePoints.Click
        Dim result As MsgBoxResult = MsgBox("Are you sure you want to delete all restore points (except the newest one) on this system?" & vbCrLf & vbCrLf & "Remember, this is a one-way action.  There is no way back once you delete them.", MsgBoxStyle.YesNo + MsgBoxStyle.Question, "Are you sure?")

        If result = MsgBoxResult.Yes Then
            disableFormElements()
            Functions.openPleaseWaitWindow("Deleting Restore Points... Please Wait.")

            toolStripDeleteAllRestorePoints.Enabled = False
            deleteAllRestorePointsThreadInstance = New System.Threading.Thread(AddressOf deleteAllRestorePointsThread)
            deleteAllRestorePointsThreadInstance.Name = "Delete All Restore Points Thread"
            deleteAllRestorePointsThreadInstance.Priority = Threading.ThreadPriority.Lowest
            deleteAllRestorePointsThreadInstance.Start()
        Else
            MsgBox("Restore points not deleted.", MsgBoxStyle.Information, Me.Text)
        End If
    End Sub

    Private Sub Form1_Click(sender As Object, e As EventArgs) Handles Me.Click
        txtRestorePointDescription.ForeColor = Color.DimGray
        txtRestorePointDescription.Text = "Type in a name for your custom-named System Restore Point..."
        btnCreate.Enabled = False
    End Sub

    Private Sub txtRestorePointDescription_Click(sender As Object, e As EventArgs) Handles txtRestorePointDescription.Click
        txtRestorePointDescription.ForeColor = Color.Black
        txtRestorePointDescription.Text = ""
        'If defaultCustomRestorePointName = "" Then
        '    txtRestorePointDescription.Text = ""
        'Else
        '    txtRestorePointDescription.Text = defaultCustomRestorePointName
        'End If
    End Sub

    Private Sub txtRestorePointDescription_Leave(sender As Object, e As EventArgs) Handles txtRestorePointDescription.Leave
        doTheGrayingOfTheRestorePointNameTextBox()
    End Sub

    Private Sub txtRestorePointDescription_LostFocus(sender As Object, e As EventArgs) Handles txtRestorePointDescription.LostFocus
        doTheGrayingOfTheRestorePointNameTextBox()
    End Sub

    Private Sub txtRestorePointDescription_TextChanged(sender As Object, e As EventArgs) Handles txtRestorePointDescription.TextChanged
        If Regex.IsMatch(txtRestorePointDescription.Text, "Type in a name for your custom-named System Restore Point\.\.\.", RegexOptions.IgnoreCase) = False And txtRestorePointDescription.Text.Trim <> Nothing And Functions.areWeInSafeMode() = False Then
            btnCreate.Enabled = True
        End If
    End Sub

    Private Sub txtRestorePointDescription_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txtRestorePointDescription.KeyUp
        If e.KeyCode = Keys.Enter And btnCreate.Enabled = True And txtRestorePointDescription.Text.Trim <> "" And Functions.areWeInSafeMode() = False Then
            btnCreate.PerformClick()
        End If
    End Sub

    Private Sub toolStripStableChannel_Click(sender As Object, e As EventArgs) Handles toolStripStableChannel.Click
        toolStripBetaChannel.Checked = False
        My.Settings.updateChannel = GlobalVariables.updateChannelStable
        My.Settings.Save()

        If IO.File.Exists("Restore Point Creator.pdb") = True Then
            Try
                IO.File.Delete("Restore Point Creator.pdb")
            Catch ex As Exception
                ' Does nothing
            End Try
        End If
    End Sub

    Private Sub toolStripBetaChannel_Click(sender As Object, e As EventArgs) Handles toolStripBetaChannel.Click
        Dim messageBoxResult As MsgBoxResult = MsgBox("You are activating the Public Beta Update Channel." & vbCrLf & vbCrLf & "This update channel is used for public beta versions in which new features and bug fixes are tested.  These are meant for people who know what they are doing and would like to help in the public testing of new versions." & vbCrLf & vbCrLf & "Are you sure you want to enable the beta update channel?", MsgBoxStyle.Question + MsgBoxStyle.YesNo, "Are you sure?")

        If messageBoxResult = MsgBoxResult.Yes Then
            toolStripStableChannel.Checked = False
            My.Settings.updateChannel = GlobalVariables.updateChannelBeta
            My.Settings.Save()
        Else
            toolStripBetaChannel.Checked = False
            toolStripStableChannel.Checked = True
            My.Settings.updateChannel = GlobalVariables.updateChannelStable
            My.Settings.Save()
        End If
    End Sub

    Private Sub KeepXAmountOfRestorePointsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles KeepXAmountOfRestorePointsToolStripMenuItem.Click
        If KeepXAmountOfRestorePointsToolStripMenuItem.Checked = True Then
            Dim Keep_X_Amount_of_Restore_PointsInstance = New createRestorePointAtUserLogon
            Keep_X_Amount_of_Restore_PointsInstance.parentFormG = Me
            Keep_X_Amount_of_Restore_PointsInstance.StartPosition = FormStartPosition.CenterParent
            Keep_X_Amount_of_Restore_PointsInstance.ShowDialog()

            Keep_X_Amount_of_Restore_PointsInstance.Dispose()
            Keep_X_Amount_of_Restore_PointsInstance = Nothing
        Else
            Dim registryKey As RegistryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True)

            registryKey.SetValue("Keep X Amount of Restore Points", "False", RegistryValueKind.String)
            registryKey.DeleteValue("Keep X Amount of Restore Points Value", False)

            registryKey.Close()
            registryKey.Dispose()

            KeepXAmountOfRestorePointsToolStripMenuItem.Text = "Keep X Amount of Restore Points"
        End If
    End Sub

    Private Sub toolStripCheckEveryWeek_Click(sender As Object, e As EventArgs) Handles toolStripCheckEveryWeek.Click
        toolStripCheckEveryTwoWeeks.Checked = False
        toolStripCheckCustom.Checked = False
        My.Settings.checkForUpdatesEveryInDays = 7
        toolStripCheckCustom.Text = "Custom"
    End Sub

    Private Sub toolStripCheckEveryTwoWeeks_Click(sender As Object, e As EventArgs) Handles toolStripCheckEveryTwoWeeks.Click
        toolStripCheckEveryWeek.Checked = False
        toolStripCheckCustom.Checked = False
        My.Settings.checkForUpdatesEveryInDays = 14
        toolStripCheckCustom.Text = "Custom"
    End Sub

    Private Sub toolStripCheckCustom_Click(sender As Object, e As EventArgs) Handles toolStripCheckCustom.Click
        toolStripCheckEveryWeek.Checked = False
        toolStripCheckEveryTwoWeeks.Checked = False

        Dim checkForUpdatesEveryInstance As New checkForUpdatesEvery
        checkForUpdatesEveryInstance.parentFormG = Me
        checkForUpdatesEveryInstance.StartPosition = FormStartPosition.CenterParent
        checkForUpdatesEveryInstance.ShowDialog()
    End Sub

    Private Sub HelpToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles HelpToolStripMenuItem.Click
        'doTheGrayingOfTheRestorePointNameTextBox()
        Functions.launchURLInWebBrowser("http://www.toms-world.org/blog/restore_point_creator/help-videos", "An error occurred when trying to launch the Help Videos URL in your default browser. The URL has been copied to your Windows Clipboard for you to paste into the address bar in the browser of your choice.")
    End Sub

    Private Sub SetBarColorToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SetBarColorToolStripMenuItem.Click
        If (My.Settings.customColors2 Is Nothing) = False Then
            Dim integerArray As Integer()
            ReDim integerArray(My.Settings.customColors2.Count - 1)

            For i = 0 To My.Settings.customColors2.Count - 1
                integerArray(i) = Integer.Parse(My.Settings.customColors2(i))
            Next

            ColorDialog.CustomColors = integerArray
            integerArray = Nothing
        End If

        ColorDialog.Color = My.Settings.barColor

        If ColorDialog.ShowDialog() = Windows.Forms.DialogResult.OK Then
            My.Settings.barColor = ColorDialog.Color
            deleteProgressBar.ProgressBarColor = My.Settings.barColor

            Dim temp As New System.Collections.Specialized.StringCollection
            For Each entry As String In ColorDialog.CustomColors
                temp.Add(entry)
            Next
            My.Settings.customColors2 = temp
            My.Settings.Save()
            temp = Nothing

            MsgBox("Color Preference Saved.", MsgBoxStyle.Information, "Setting Saved")
        End If
    End Sub

    Private Sub TableLayoutPanel2_Click(sender As Object, e As EventArgs) Handles TableLayoutPanel2.Click
        doTheGrayingOfTheRestorePointNameTextBox()
    End Sub

    Sub doTheGrayingOfTheRestorePointNameTextBox()
        If Regex.IsMatch(txtRestorePointDescription.Text, "Type in a name for your custom-named System Restore Point\.\.\.", RegexOptions.IgnoreCase) Then
            txtRestorePointDescription.ForeColor = Color.DimGray
            btnCreate.Enabled = False
        ElseIf txtRestorePointDescription.Text.Trim = Nothing Then
            txtRestorePointDescription.Text = "Type in a name for your custom-named System Restore Point..."
            txtRestorePointDescription.ForeColor = Color.DimGray
            btnCreate.Enabled = False
            'ElseIf txtRestorePointDescription.Text.Trim = defaultCustomRestorePointName Then
            '    txtRestorePointDescription.Text = "Type in a name for your custom-named System Restore Point..."
            '    txtRestorePointDescription.ForeColor = Color.DimGray
            '    btnCreate.Enabled = False
        End If
    End Sub

    Private Sub MenuStrip1_Click(sender As Object, e As EventArgs) Handles MenuStrip1.Click
        doTheGrayingOfTheRestorePointNameTextBox()
    End Sub

    Private Sub lblCurrentRestorePointsLabel_Click(sender As Object, e As EventArgs) Handles lblCurrentRestorePointsLabel.Click
        doTheGrayingOfTheRestorePointNameTextBox()
    End Sub

    Private Sub StatusStrip1_Click(sender As Object, e As EventArgs)
        doTheGrayingOfTheRestorePointNameTextBox()
    End Sub

    Private Sub DefaultCustomRestorePointNameToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles DefaultCustomRestorePointNameToolStripMenuItem.Click
        Dim setDefaultCustomRestorePointNameWindowInstance As New Set_Default_Custom_Restore_Point_Name
        setDefaultCustomRestorePointNameWindowInstance.StartPosition = FormStartPosition.CenterParent
        setDefaultCustomRestorePointNameWindowInstance.parentFormG = Me
        setDefaultCustomRestorePointNameWindowInstance.ShowDialog()
    End Sub

    Private Sub ShowMessageBoxAfterSuccessfulCreationOfRestorePointToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ShowMessageBoxAfterSuccessfulCreationOfRestorePointToolStripMenuItem.Click
        My.Settings.ShowMessageBoxAfterSuccessfulCreationOfRestorePoint = ShowMessageBoxAfterSuccessfulCreationOfRestorePointToolStripMenuItem.Checked
        My.Settings.Save()
    End Sub

    Private Sub ShowMessageBoxAfterSuccessfulDeletionOfRestorePointsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ShowMessageBoxAfterSuccessfulDeletionOfRestorePointsToolStripMenuItem.Click
        My.Settings.ShowMessageBoxAfterSuccessfulDeletionOfRestorePoints = ShowMessageBoxAfterSuccessfulDeletionOfRestorePointsToolStripMenuItem.Checked
        My.Settings.Save()
    End Sub

    Private Sub CheckSystemDrivesForFullShadowStorageToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CheckSystemDrivesForFullShadowStorageToolStripMenuItem.Click
        My.Settings.checkSystemDrivesForFullShadowStorage = CheckSystemDrivesForFullShadowStorageToolStripMenuItem.Checked
        My.Settings.Save()
    End Sub

    Private Sub toolStripAutomaticallyCheckForUpdates_Click(sender As System.Object, e As System.EventArgs) Handles toolStripAutomaticallyCheckForUpdates.Click
        My.Settings.CheckForUpdates = toolStripAutomaticallyCheckForUpdates.Checked
        My.Settings.Save()
    End Sub

    Private Sub toolStripConfirmDeletions_Click(sender As System.Object, e As System.EventArgs) Handles toolStripConfirmDeletions.Click
        My.Settings.confirmRestorePointDeletions = toolStripConfirmDeletions.Checked
        My.Settings.Save()
    End Sub

    Private Sub toolStripClear_Click(sender As System.Object, e As System.EventArgs) Handles toolStripClear.Click
        toolStripDeleteOldRestorePoints.Text = "Delete Old Restore Points"
        My.Settings.maxDaysManualDelete = -1
        My.Settings.Save()
    End Sub

    Private Sub NotifyIcon1_DoubleClick(sender As Object, e As EventArgs) Handles NotifyIcon1.DoubleClick
        Try
            Me.WindowState = FormWindowState.Normal
            Me.BringToFront()
            Me.BringToFront()

            'AppActivate(Me.Text)
            AppActivate(Process.GetCurrentProcess.Id)
        Catch ex As Exception
            ' Does nothing
        End Try
    End Sub

    'Private Sub toolUtilities_Click(sender As Object, e As EventArgs) Handles toolUtilities.Click, OptionsToolStripMenuItem.Click, toolStripAbout.Click
    '    doTheGrayingOfTheRestorePointNameTextBox()
    'End Sub

    'Private Sub changeMessageTypeMenuItems()
    '    If My.Settings.notificationType = GlobalVariables.notificationTypeBalloon Then
    '        BalloonToolStripMenuItem.Checked = True
    '        MessageBoxToolStripMenuItem.Checked = False
    '        'MessageBoxToolStripMenuItem.Text = "Message Box"
    '        'BalloonToolStripMenuItem.Text = "Balloon/Notification Center Popup (Enabled)"
    '    Else
    '        BalloonToolStripMenuItem.Checked = False
    '        MessageBoxToolStripMenuItem.Checked = True
    '        'MessageBoxToolStripMenuItem.Text = "Message Box (Enabled)"
    '        'BalloonToolStripMenuItem.Text = "Balloon/Notification Center Popup"
    '    End If
    'End Sub

    Private Sub MessageBoxToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MessageBoxToolStripMenuItem.Click
        BalloonToolStripMenuItem.Checked = False
        My.Settings.notificationType = GlobalVariables.notificationTypeMessageBox
        My.Settings.Save()
        'changeMessageTypeMenuItems()
    End Sub

    Private Sub BalloonToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles BalloonToolStripMenuItem.Click
        MessageBoxToolStripMenuItem.Checked = False
        My.Settings.notificationType = GlobalVariables.notificationTypeBalloon
        My.Settings.Save()
        'changeMessageTypeMenuItems()
    End Sub

    Private Sub AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Click
        If AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked Then
            AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked = False
        Else
            Dim msgBoxResult As MsgBoxResult = MsgBox("It isn't recommended to allow System Restore Point Creator to delete all System Restore Points that exist on this system, including the most recent System Restore Point." & vbCrLf & vbCrLf & "Are you sure you want to do this?", MsgBoxStyle.Question + MsgBoxStyle.YesNo, Me.Text)

            If msgBoxResult = Microsoft.VisualBasic.MsgBoxResult.Yes Then
                AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked = True
            End If
        End If

        My.Settings.allowDeleteOfAllRestorePoints = AllowForDeletionOfAllSystemRestorePointsToolStripMenuItem.Checked
        My.Settings.Save()
    End Sub

    Private Sub btnCreateRestorePointNameWithDefaultName_Click(sender As Object, e As EventArgs) Handles btnCreateRestorePointNameWithDefaultName.Click
        If Functions.areWeInSafeMode() = True Then
            MsgBox("You are in Safe Mode, it's not recommended to make restore points in Safe Mode.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        End If

        Functions.openPleaseWaitWindow("Creating Restore Point... Please Wait.")

        Dim createSystemRestorePointThread As New Threading.Thread(Sub() unifiedCreateSystemRestorePoint(defaultCustomRestorePointName))
        createSystemRestorePointThread.Name = "Create System Restore Point Thread"
        createSystemRestorePointThread.Priority = Threading.ThreadPriority.Normal
        createSystemRestorePointThread.Start()
        createSystemRestorePointThread = Nothing
    End Sub

    Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
        Try
            'AppActivate(Me.Text)
            AppActivate(Process.GetCurrentProcess.Id)
            Me.BringToFront()
            Me.Focus()
            Timer1.Enabled = False
        Catch ex As Exception
            ' Does nothing
        End Try
    End Sub

    Private Sub BypassNoUACLauncherToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles BypassNoUACLauncherToolStripMenuItem.Click
        If BypassNoUACLauncherToolStripMenuItem.Checked Then
            Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("No Task", "True", RegistryValueKind.String)
        Else
            Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("No Task", "False", RegistryValueKind.String)
        End If
    End Sub

    Private Sub ViewOfficialChangeLogToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles ViewOfficialChangeLogToolStripMenuItem1.Click
        If (windowInstances.frmChangeLog Is Nothing) Then
            windowInstances.frmChangeLog = New Change_Log
            windowInstances.frmChangeLog.StartPosition = FormStartPosition.CenterParent
            windowInstances.frmChangeLog.Icon = Me.Icon
            windowInstances.frmChangeLog.Show()
        Else
            windowInstances.frmChangeLog.BringToFront()
        End If
    End Sub

    Private Sub btnRestoreToRestorePointSafeMode_Click(sender As Object, e As EventArgs) Handles btnRestoreToRestorePointSafeMode.Click
        If systemRestorePointsList.SelectedItems.Count > 1 Then
            MsgBox("You can't have multiple System Restore Points selected for this function to work, you must only select one.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        ElseIf systemRestorePointsList.SelectedItems.Count = 0 Then
            MsgBox("You must select a System Restore Point to restore your system to.", MsgBoxStyle.Information, Me.Text)
            Exit Sub
        End If

        Dim selectedRestorePoint As ListViewItem = systemRestorePointsList.SelectedItems(0)

        Dim strDescription As String = selectedRestorePoint.SubItems(1).Text
        Dim strDate As String = selectedRestorePoint.SubItems(2).Text
        Dim strType As String = selectedRestorePoint.SubItems(3).Text

        Dim msgboxResult As MsgBoxResult = MsgBox(String.Format("Are you sure you want to restore your system back to the selected System Restore Point?  Your system will reboot into Safe Mode and perform the restore process there and reboot after the process is complete.{0}{0}Description: {1}{0}Created On: {2}{0}Type: {3}{0}{0}{0}IMPORTANT!{0}{0}Upon reboot, your machine will ask you what operating system to boot; choose ""Windows Safe Mode Boot"" at that prompt and your machine will then boot into Safe Mode and perform the System Restore.", vbCrLf, strDescription, strDate, strType), MsgBoxStyle.YesNo + MsgBoxStyle.Question, "Are you sure?")

        If msgboxResult = Microsoft.VisualBasic.MsgBoxResult.Yes Then
            If Functions.setSafeModeBoot(True) = True Then
                Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Preselected Restore Point for Restore in Safe Mode", Integer.Parse(systemRestorePointsList.SelectedItems(0).SubItems(0).Text), RegistryValueKind.String)
                Registry.LocalMachine.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\RunOnce", True).SetValue("*Restore To Restore Point", String.Format("{0}{1}{0} -restoretopoint", Chr(34), Application.ExecutablePath), RegistryValueKind.String)
                Functions.rebootSystem()
            Else
                MsgBox("There was an error while setting your system up for booting into Safe Mode. Restoration process aborted.", MsgBoxStyle.Information, Me.Text)
            End If
        Else
            MsgBox("Your system has NOT been restored to the selected System Restore Point.", MsgBoxStyle.Information, Me.Text)
        End If
    End Sub

    Private Sub stripRestoreSafeMode_Click(sender As Object, e As EventArgs) Handles stripRestoreSafeMode.Click
        btnRestoreToRestorePointSafeMode.PerformClick()
    End Sub

    Private Sub CreateRestorePointAtUserLogonToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles CreateRestorePointAtUserLogonToolStripMenuItem.Click
        If (windowInstances.frmCreateRestorePointAtUserLogon Is Nothing) Then
            windowInstances.frmCreateRestorePointAtUserLogon = New Create_Restore_Point_at_User_Logon
            windowInstances.frmCreateRestorePointAtUserLogon.StartPosition = FormStartPosition.CenterParent
            windowInstances.frmCreateRestorePointAtUserLogon.Icon = Me.Icon
            windowInstances.frmCreateRestorePointAtUserLogon.Show()
        Else
            windowInstances.frmCreateRestorePointAtUserLogon.BringToFront()
        End If
    End Sub

    Private Sub EnableSystemEventLoggingToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EnableSystemEventLoggingToolStripMenuItem.Click
        If EnableSystemEventLoggingToolStripMenuItem.Checked = True Then
            Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Enable System Logging", "True", RegistryValueKind.String)
            GlobalVariables.boolLogToSystemLog = True
        Else
            Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Enable System Logging", "False", RegistryValueKind.String)
            GlobalVariables.boolLogToSystemLog = False
        End If
    End Sub

    Private Sub ProgramEventLogToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ProgramEventLogToolStripMenuItem.Click
        If (windowInstances.eventLogForm Is Nothing) Then
            windowInstances.eventLogForm = New eventLogForm
            windowInstances.eventLogForm.StartPosition = FormStartPosition.CenterParent
            windowInstances.eventLogForm.Icon = Me.Icon
            windowInstances.eventLogForm.Show()
        Else
            windowInstances.eventLogForm.BringToFront()
        End If
    End Sub

    Private Sub CheckWindowsActivePowerPlan_Click(sender As Object, e As EventArgs) Handles CheckWindowsActivePowerPlan.Click
        Dim registryKey As RegistryKey = Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True)

        If CheckWindowsActivePowerPlan.Checked = True Then
            registryKey.SetValue(GlobalVariables.strCheckWindowsActivePowerPlanRegistryValueName, "True", RegistryValueKind.String)
        Else
            registryKey.SetValue(GlobalVariables.strCheckWindowsActivePowerPlanRegistryValueName, "False", RegistryValueKind.String)
        End If

        registryKey.Close()
        registryKey.Dispose()
    End Sub

    Private Sub TellMeIfRestorePointCreatorModifiedMyPowerPlan_Click(sender As Object, e As EventArgs) Handles TellMeIfRestorePointCreatorModifiedMyPowerPlan.Click
        My.Settings.TellMeIfRestorePointCreatorModifiedMyPowerPlan = TellMeIfRestorePointCreatorModifiedMyPowerPlan.Checked
    End Sub

    Private Sub SwitchToDebugBuildToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SwitchToDebugBuildToolStripMenuItem.Click
        If GlobalVariables.boolDebugBuild = True Then
            Exit Sub
        End If

        Dim msgBoxResult As MsgBoxResult = MsgBox("The debug build is a build that's not optimized for normal use but may help in the process of debugging crashes and other issues that you may have with the program. The debug build outputs far more crash data than the release type build." & vbCrLf & vbCrLf & "Are you sure you want to switch to the debug build?", MsgBoxStyle.Question + MsgBoxStyle.YesNo)

        If msgBoxResult = MsgBoxResult.Yes Then
            Dim downloadThread As New Threading.Thread(Sub()
                                                           Try
                                                               Dim fileInfo As New System.IO.FileInfo(Application.ExecutablePath)

                                                               Dim webClient As New System.Net.WebClient
                                                               webClient.DownloadFile(GlobalVariables.updaterURL, "updater.exe")
                                                               webClient.DownloadFile(GlobalVariables.programFileURLDebugBuild, fileInfo.Name & ".new")

                                                               If IO.File.Exists("Restore Point Creator.pdb") = True Then
                                                                   IO.File.Delete("Restore Point Creator.pdb")
                                                               End If

                                                               webClient.DownloadFile(GlobalVariables.programFileURLDebugBuildDebugSymbols, "Restore Point Creator.pdb")

                                                               webClient.Dispose()
                                                               webClient = Nothing

                                                               If IO.File.Exists("updater.exe") = True Then
                                                                   If Functions.verifyChecksum(GlobalVariables.updaterURLSHA1, "updater.exe", True) = False Then
                                                                       IO.File.Delete("updater.exe")
                                                                       Exit Sub
                                                                   End If
                                                               End If

                                                               If IO.File.Exists(fileInfo.Name & ".new") = True Then
                                                                   If Functions.verifyChecksum(GlobalVariables.programFileURLDebugBuildSHA1, fileInfo.Name & ".new", True) = False Then
                                                                       IO.File.Delete(fileInfo.Name & ".new")
                                                                       Exit Sub
                                                                   End If
                                                               End If

                                                               If IO.File.Exists("Restore Point Creator.pdb") = True Then
                                                                   If Functions.verifyChecksum(GlobalVariables.programFileURLDebugBuildDebugSymbolsURL, "Restore Point Creator.pdb", True) = False Then
                                                                       IO.File.Delete("Restore Point Creator.pdb")
                                                                       Exit Sub
                                                                   End If
                                                               End If

                                                               fileInfo = Nothing

                                                               If GlobalVariables.boolWinXP = True Then
                                                                   Process.Start(GlobalVariables.updaterFileName, String.Format("--file={0}{1}{0}", Chr(34), Application.ExecutablePath))
                                                               Else
                                                                   Dim startInfo As New ProcessStartInfo
                                                                   startInfo.FileName = GlobalVariables.updaterFileName
                                                                   startInfo.Arguments = String.Format("--file={0}{1}{0}", Chr(34), Application.ExecutablePath)
                                                                   startInfo.Verb = "runas"
                                                                   Process.Start(startInfo)
                                                               End If

                                                               Me.Close()
                                                               Application.Exit()
                                                           Catch ex As Exception
                                                               exceptionHandler.manuallyLoadCrashWindow(ex.Message, ex.StackTrace, ex.GetType)
                                                           End Try
                                                       End Sub)
            downloadThread.Name = "Debug Build Download Thread"
            downloadThread.Start()
        End If
    End Sub

    Private Sub EnableThisIfTheUserInterfaceIsTooSmallOnSystemsRunningWindows8Or10ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles EnableThisIfTheUserInterfaceIsTooSmallOnSystemsRunningWindows8Or10ToolStripMenuItem.Click
        If Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags") Is Nothing Then
            Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion", True).CreateSubKey("AppCompatFlags")
            Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags", True).CreateSubKey("Layers")
        End If

        If Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers") Is Nothing Then
            Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags", True).CreateSubKey("Layers")
        End If

        If EnableThisIfTheUserInterfaceIsTooSmallOnSystemsRunningWindows8Or10ToolStripMenuItem.Checked = True Then
            'Dim msgboxResult As MsgBoxResult = MsgBox("This is a system tweak that may help make the program more compatible with systems that are running Windows 8 or 10, have monitors that are running at high DPIs, and the program's GUI or Graphical User Interface is too small to see." & vbCrLf & vbCrLf & "This is still in testing, if you want to try this potential fix, please click the Yes button below. Otherwise, click No.", MsgBoxStyle.Information + MsgBoxStyle.YesNo, Me.Text)

            Dim registryKeyWeAreWorkingWith As RegistryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers", True)
            registryKeyWeAreWorkingWith.SetValue(Process.GetCurrentProcess.MainModule.FileName.ToLower, "~ HIGHDPIAWARE", RegistryValueKind.String)
            registryKeyWeAreWorkingWith.Close()
            registryKeyWeAreWorkingWith.Dispose()

            MsgBox("The compatibility flag has been set for the program. You will have to exit and relaunch this program for this change to take effect." & vbCrLf & vbCrLf & "The program will now close.", MsgBoxStyle.Information, Me.Text)
            Me.Close()
        Else
            Dim registryKeyWeAreWorkingWith As RegistryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers", True)
            registryKeyWeAreWorkingWith.DeleteValue(Process.GetCurrentProcess.MainModule.FileName.ToLower, False)
            registryKeyWeAreWorkingWith.Close()
            registryKeyWeAreWorkingWith.Dispose()
        End If
    End Sub

    Private Sub LogProgramLoadsAndExitsToEventLogToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles LogProgramLoadsAndExitsToEventLogToolStripMenuItem.Click
        GlobalVariables.boolLogLoadsAndExitsToEventLog = LogProgramLoadsAndExitsToEventLogToolStripMenuItem.Checked

        If GlobalVariables.boolLogLoadsAndExitsToEventLog = True Then
            Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Log Program Loads and Exits to Event Log", "True", RegistryValueKind.String)
        Else
            Microsoft.Win32.Registry.LocalMachine.OpenSubKey(GlobalVariables.strProgramRegistryKey, True).SetValue("Log Program Loads and Exits to Event Log", "False", RegistryValueKind.String)
        End If
    End Sub

    Private Sub ContactTheDeveloperToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ContactTheDeveloperToolStripMenuItem.Click
        Functions.launchURLInWebBrowser("http://www.toms-world.org/blog/contact", "An error occurred when trying to launch the official contact form's URL in your default browser. The URL has been copied to your Windows Clipboard for you to paste into the address bar in the browser of your choice.")
    End Sub
End Class